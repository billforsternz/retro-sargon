   1:			;***********************************************************
   2:			;
   3:			;               SARGON
   4:			;
   5:			;       Sargon is a computer chess playing program designed
   6:			; and coded by Dan and Kathe Spracklen.  Copyright 1978. All
   7:			; rights reserved.  No part of this publication may be
   8:			; reproduced without the prior written permission.
   9:			;***********************************************************
  10:			
  11:			
  12:			;***********************************************************
  13:			; EQUATES
  14:			;***********************************************************
  15:			;
  16:	0001          	PAWN    EQU     1
  17:	0002          	KNIGHT  EQU     2
  18:	0003          	BISHOP  EQU     3
  19:	0004          	ROOK    EQU     4
  20:	0005          	QUEEN   EQU     5
  21:	0006          	KING    EQU     6
  22:	0000          	WHITE   EQU     0
  23:	0080          	BLACK   EQU     80H
  24:	0081          	BPAWN   EQU     BLACK+PAWN
  25:			
  26:			;***********************************************************
  27:			; TABLES SECTION
  28:			;***********************************************************
  29:	0000          	START:
  30:	0080          	        ORG     START+80H
  31:	0100          	TBASE   EQU     START+100H
  32:			;There are multiple tables used for fast table look ups
  33:			;that are declared relative to TBASE. In each case there
  34:			;is a table (say DIRECT) and one or more variables that
  35:			;index into the table (say INDX2). The table is declared
  36:			;as a relative offset from the TBASE like this;
  37:			;
  38:			;DIRECT = .-TBASE  ;In this . is the current location
  39:			;                  ;($ rather than . is used in most assemblers)
  40:			;
  41:			;The index variable is declared as;
  42:			;INDX2    .WORD TBASE
  43:			;
  44:			;TBASE itself is page aligned, for example TBASE = 100h
  45:			;Although 2 bytes are allocated for INDX2 the most significant
  46:			;never changes (so in our example it's 01h). If we want
  47:			;to index 5 bytes into DIRECT we set the low byte of INDX2
  48:			;to 5 (now INDX2 = 105h) and load IDX2 into an index
  49:			;register. The following sequence loads register C with
  50:			;the 5th byte of the DIRECT table (Z80 mnemonics)
  51:			;        LD      A,5
  52:			;        LD      [INDX2],A
  53:			;        LD      IY,INDX2
  54:			;        LD      C,[IY+DIRECT]
  55:			;
  56:			;It's a bit like the little known C trick where array[5]
  57:			;can also be written as 5[array].
  58:			;
  59:			;The Z80 indexed addressing mode uses a signed 8 bit
  60:			;displacement offset (here DIRECT) in the range -128
  61:			;to 127. Sargon needs most of this range, which explains
  62:			;why DIRECT is allocated 80h bytes after start and 80h
  63:			;bytes *before* TBASE, this arrangement sets the DIRECT
  64:			;displacement to be -80h bytes (-128 bytes). After the 24
  65:			;byte DIRECT table comes the DPOINT table. So the DPOINT
  66:			;displacement is -128 + 24 = -104. The final tables have
  67:			;positive displacements.
  68:			;
  69:			;The negative displacements are not necessary in X86 where
  70:			;the equivalent mov reg,[di+offset] indexed addressing
  71:			;is not limited to 8 bit offsets, so in the X86 port we
  72:			;put the first table DIRECT at the same address as TBASE,
  73:			;a more natural arrangement I am sure you'll agree.
  74:			;
  75:			;In general it seems Sargon doesn't want memory allocated
  76:			;in the first page of memory, so we start TBASE at 100h not
  77:			;at 0h. One reason is that Sargon extensively uses a trick
  78:			;to test for a NULL pointer; it tests whether the hi byte of
  79:			;a pointer == 0 considers this as a equivalent to testing
  80:			;whether the whole pointer == 0 (works as long as pointers
  81:			;never point to page 0).
  82:			;
  83:			;Also there is an apparent bug in Sargon, such that MLPTRJ
  84:			;is left at 0 for the root node and the MLVAL for that root
  85:			;node is therefore written to memory at offset 5 from 0 (so
  86:			;in page 0). It's a bit wasteful to waste a whole 256 byte
  87:			;page for this, but it is compatible with the goal of making
  88:			;as few changes as possible to the inner heart of Sargon.
  89:			;In the X86 port we lock the uninitialised MLPTRJ bug down
  90:			;so MLPTRJ is always set to zero and rendering the bug
  91:			;harmless (search for MLPTRJ to find the relevant code).
  92:			
  93:			;**********************************************************
  94:			; DIRECT  --  Direction Table.  Used to determine the dir-
  95:			;             ection of movement of each piece.
  96:			;***********************************************************
  97:	FF80          	DIRECT  EQU     $-TBASE
  98:	0080  090BF5F7	        DB      +09,+11,-11,-09
  99:	0084  0AF601FF	        DB      +10,-10,+01,-01
 100:	0088  EBF40813	        DB      -21,-12,+08,+19
 101:	008C  150CF8ED	        DB      +21,+12,-08,-19
 102:	0090  0A0A0B09	        DB      +10,+10,+11,+09
 103:	0094  F6F6F5F7	        DB      -10,-10,-11,-09
 104:			;***********************************************************
 105:			; DPOINT  --  Direction Table Pointer. Used to determine
 106:			;             where to begin in the direction table for any
 107:			;             given piece.
 108:			;***********************************************************
 109:	FF98          	DPOINT  EQU     $-TBASE
 110:	0098  14100800	        DB      20,16,8,0,4,0,0
	      040000
 111:			
 112:			;***********************************************************
 113:			; DCOUNT  --  Direction Table Counter. Used to determine
 114:			;             the number of directions of movement for any
 115:			;             given piece.
 116:			;***********************************************************
 117:	FF9F          	DCOUNT  EQU     $-TBASE
 118:	009F  04040804	        DB      4,4,8,4,4,8,8
	      040808
 119:			
 120:			;***********************************************************
 121:			; PVALUE  --  Point Value. Gives the point value of each
 122:			;             piece, or the worth of each piece.
 123:			;***********************************************************
 124:	FFA5          	PVALUE  EQU     $-TBASE-1
 125:	00A6  01030305	        DB      1,3,3,5,9,10
	      090A
 126:			
 127:			;***********************************************************
 128:			; PIECES  --  The initial arrangement of the first rank of
 129:			;             pieces on the board. Use to set up the board
 130:			;             for the start of the game.
 131:			;***********************************************************
 132:	FFAC          	PIECES  EQU     $-TBASE
 133:	00AC  04020305	        DB      4,2,3,5,6,3,2,4
	      06030204
 134:			
 135:			;***********************************************************
 136:			; BOARD   --  Board Array.  Used to hold the current position
 137:			;             of the board during play. The board itself
 138:			;             looks like:
 139:			;             FFFFFFFFFFFFFFFFFFFF
 140:			;             FFFFFFFFFFFFFFFFFFFF
 141:			;             FF0402030506030204FF
 142:			;             FF0101010101010101FF
 143:			;             FF0000000000000000FF
 144:			;             FF0000000000000000FF
 145:			;             FF0000000000000060FF
 146:			;             FF0000000000000000FF
 147:			;             FF8181818181818181FF
 148:			;             FF8482838586838284FF
 149:			;             FFFFFFFFFFFFFFFFFFFF
 150:			;             FFFFFFFFFFFFFFFFFFFF
 151:			;             The values of FF form the border of the
 152:			;             board, and are used to indicate when a piece
 153:			;             moves off the board. The individual bits of
 154:			;             the other bytes in the board array are as
 155:			;             follows:
 156:			;             Bit 7 -- Color of the piece
 157:			;                     1 -- Black
 158:			;                     0 -- White
 159:			;             Bit 6 -- Not used
 160:			;             Bit 5 -- Not used
 161:			;             Bit 4 --Castle flag for Kings only
 162:			;             Bit 3 -- Piece has moved flag
 163:			;             Bits 2-0 Piece type
 164:			;                     1 -- Pawn
 165:			;                     2 -- Knight
 166:			;                     3 -- Bishop
 167:			;                     4 -- Rook
 168:			;                     5 -- Queen
 169:			;                     6 -- King
 170:			;                     7 -- Not used
 171:			;                     0 -- Empty Square
 172:			;***********************************************************
 173:	FFB4          	BOARD   EQU     $-TBASE
 174:	00B4          	BOARDA  DS      120
 175:			
 176:			;***********************************************************
 177:			; ATKLIST -- Attack List. A two part array, the first
 178:			;            half for white and the second half for black.
 179:			;            It is used to hold the attackers of any given
 180:			;            square in the order of their value.
 181:			;
 182:			; WACT   --  White Attack Count. This is the first
 183:			;            byte of the array and tells how many pieces are
 184:			;            in the white portion of the attack list.
 185:			;
 186:			; BACT   --  Black Attack Count. This is the eighth byte of
 187:			;            the array and does the same for black.
 188:			;***********************************************************
 189:	012C          	WACT    EQU     ATKLST
 190:	0133          	BACT    EQU     ATKLST+7
 191:	012C  00000000	ATKLST  DW      0,0,0,0,0,0,0
	      00000000
	      00000000
	      0000
 192:			
 193:			;***********************************************************
 194:			; PLIST   --  Pinned Piece Array. This is a two part array.
 195:			;             PLISTA contains the pinned piece position.
 196:			;             PLISTD contains the direction from the pinned
 197:			;             piece to the attacker.
 198:			;***********************************************************
 199:	0039          	PLIST   EQU     $-TBASE-1
 200:	0043          	PLISTD  EQU     PLIST+10
 201:	013A  00000000	PLISTA  DW      0,0,0,0,0,0,0,0,0,0
	      00000000
	      00000000
	      00000000
	      00000000
 202:			
 203:			;***********************************************************
 204:			; POSK    --  Position of Kings. A two byte area, the first
 205:			;             byte of which hold the position of the white
 206:			;             king and the second holding the position of
 207:			;             the black king.
 208:			;
 209:			; POSQ    --  Position of Queens. Like POSK,but for queens.
 210:			;***********************************************************
 211:	014E  185F    	POSK    DB      24,95
 212:	0150  0E5E    	POSQ    DB      14,94
 213:	0152  FF      	        DB      -1
 214:			
 215:			;***********************************************************
 216:			; SCORE   --  Score Array. Used during Alpha-Beta pruning to
 217:			;             hold the scores at each ply. It includes two
 218:			;             "dummy" entries for ply -1 and ply 0.
 219:			;***********************************************************
 220:	0153  00000000	SCORE   DW      0,0,0,0,0,0     ;Z80 max 6 ply
	      00000000
	      00000000
 221:			
 222:			;***********************************************************
 223:			; PLYIX   --  Ply Table. Contains pairs of pointers, a pair
 224:			;             for each ply. The first pointer points to the
 225:			;             top of the list of possible moves at that ply.
 226:			;             The second pointer points to which move in the
 227:			;             list is the one currently being considered.
 228:			;***********************************************************
 229:	015F  00000000	PLYIX   DW      0,0,0,0,0,0,0,0,0,0
	      00000000
	      00000000
	      00000000
	      00000000
 230:	0173  00000000	        DW      0,0,0,0,0,0,0,0,0,0
	      00000000
	      00000000
	      00000000
	      00000000
 231:			
 232:			;***********************************************************
 233:			; STACK   --  Contains the stack for the program.
 234:			;***********************************************************
 235:	02FF          	        ORG     START+2FFH
 236:	02FF          	STACK:
 237:			
 238:			;***********************************************************
 239:			; TABLE INDICES SECTION
 240:			;
 241:			; M1-M4   --  Working indices used to index into
 242:			;             the board array.
 243:			;
 244:			; T1-T3   --  Working indices used to index into Direction
 245:			;             Count, Direction Value, and Piece Value tables.
 246:			;
 247:			; INDX1   --  General working indices. Used for various
 248:			; INDX2       purposes.
 249:			;
 250:			; NPINS   --  Number of Pins. Count and pointer into the
 251:			;             pinned piece list.
 252:			;
 253:			; MLPTRI  --  Pointer into the ply table which tells
 254:			;             which pair of pointers are in current use.
 255:			;
 256:			; MLPTRJ  --  Pointer into the move list to the move that is
 257:			;             currently being processed.
 258:			;
 259:			; SCRIX   --  Score Index. Pointer to the score table for
 260:			;             the ply being examined.
 261:			;
 262:			; BESTM   --  Pointer into the move list for the move that
 263:			;             is currently considered the best by the
 264:			;             Alpha-Beta pruning process.
 265:			;
 266:			; MLLST   --  Pointer to the previous move placed in the move
 267:			;             list. Used during generation of the move list.
 268:			;
 269:			; MLNXT   --  Pointer to the next available space in the move
 270:			;             list.
 271:			;
 272:			;***********************************************************
 273:	0000          	        ORG     START+0
 274:	0000  0001    	M1      DW      TBASE
 275:	0002  0001    	M2      DW      TBASE
 276:	0004  0001    	M3      DW      TBASE
 277:	0006  0001    	M4      DW      TBASE
 278:	0008  0001    	T1      DW      TBASE
 279:	000A  0001    	T2      DW      TBASE
 280:	000C  0001    	T3      DW      TBASE
 281:	000E  0001    	INDX1   DW      TBASE
 282:	0010  0001    	INDX2   DW      TBASE
 283:	0012  0001    	NPINS   DW      TBASE
 284:	0014  5F01    	MLPTRI  DW      PLYIX
 285:	0016  0000    	MLPTRJ  DW      0
 286:	0018  0000    	SCRIX   DW      0
 287:	001A  0000    	BESTM   DW      0
 288:	001C  0000    	MLLST   DW      0
 289:	001E  0003    	MLNXT   DW      MLIST
 290:			
 291:			;***********************************************************
 292:			; VARIABLES SECTION
 293:			;
 294:			; KOLOR   --  Indicates computer's color. White is 0, and
 295:			;             Black is 80H.
 296:			;
 297:			; COLOR   --  Indicates color of the side with the move.
 298:			;
 299:			; P1-P3   --  Working area to hold the contents of the board
 300:			;             array for a given square.
 301:			;
 302:			; PMATE   --  The move number at which a checkmate is
 303:			;             discovered during look ahead.
 304:			;
 305:			; MOVENO  --  Current move number.
 306:			;
 307:			; PLYMAX  --  Maximum depth of search using Alpha-Beta
 308:			;             pruning.
 309:			;
 310:			; NPLY    --  Current ply number during Alpha-Beta
 311:			;             pruning.
 312:			;
 313:			; CKFLG   --  A non-zero value indicates the king is in check.
 314:			;
 315:			; MATEF   --  A zero value indicates no legal moves.
 316:			;
 317:			; VALM    --  The score of the current move being examined.
 318:			;
 319:			; BRDC    --  A measure of mobility equal to the total number
 320:			;             of squares white can move to minus the number
 321:			;             black can move to.
 322:			;
 323:			; PTSL    --  The maximum number of points which could be lost
 324:			;             through an exchange by the player not on the
 325:			;             move.
 326:			;
 327:			; PTSW1   --  The maximum number of points which could be won
 328:			;             through an exchange by the player not on the
 329:			;             move.
 330:			;
 331:			; PTSW2   --  The second highest number of points which could
 332:			;             be won through a different exchange by the player
 333:			;             not on the move.
 334:			;
 335:			; MTRL    --  A measure of the difference in material
 336:			;             currently on the board. It is the total value of
 337:			;             the white pieces minus the total value of the
 338:			;             black pieces.
 339:			;
 340:			; BC0     --  The value of board control(BRDC) at ply 0.
 341:			;
 342:			; MV0     --  The value of material(MTRL) at ply 0.
 343:			;
 344:			; PTSCK   --  A non-zero value indicates that the piece has
 345:			;             just moved itself into a losing exchange of
 346:			;             material.
 347:			;
 348:			; BMOVES  --  Our very tiny book of openings. Determines
 349:			;             the first move for the computer.
 350:			;
 351:			;***********************************************************
 352:	0020  00      	KOLOR   DB      0
 353:	0021  00      	COLOR   DB      0
 354:	0022  00      	P1      DB      0
 355:	0023  00      	P2      DB      0
 356:	0024  00      	P3      DB      0
 357:	0025  00      	PMATE   DB      0
 358:	0026  00      	MOVENO  DB      0
 359:	0027  02      	PLYMAX  DB      2
 360:	0028  00      	NPLY    DB      0
 361:	0029  00      	CKFLG   DB      0
 362:	002A  00      	MATEF   DB      0
 363:	002B  00      	VALM    DB      0
 364:	002C  00      	BRDC    DB      0
 365:	002D  00      	PTSL    DB      0
 366:	002E  00      	PTSW1   DB      0
 367:	002F  00      	PTSW2   DB      0
 368:	0030  00      	MTRL    DB      0
 369:	0031  00      	BC0     DB      0
 370:	0032  00      	MV0     DB      0
 371:	0033  00      	PTSCK   DB      0
 372:	0034  233710  	BMOVES  DB      35,55,10H
 373:	0037  223610  	        DB      34,54,10H
 374:	003A  554110  	        DB      85,65,10H
 375:	003D  544010  	        DB      84,64,10H
 376:			
 377:			;***********************************************************
 378:			; MOVE LIST SECTION
 379:			;
 380:			; MLIST   --  A 2048 byte storage area for generated moves.
 381:			;             This area must be large enough to hold all
 382:			;             the moves for a single leg of the move tree.
 383:			;
 384:			; MLEND   --  The address of the last available location
 385:			;             in the move list.
 386:			;
 387:			; MLPTR   --  The Move List is a linked list of individual
 388:			;             moves each of which is 6 bytes in length. The
 389:			;             move list pointer(MLPTR) is the link field
 390:			;             within a move.
 391:			;
 392:			; MLFRP   --  The field in the move entry which gives the
 393:			;             board position from which the piece is moving.
 394:			;
 395:			; MLTOP   --  The field in the move entry which gives the
 396:			;             board position to which the piece is moving.
 397:			;
 398:			; MLFLG   --  A field in the move entry which contains flag
 399:			;             information. The meaning of each bit is as
 400:			;             follows:
 401:			;             Bit 7  --  The color of any captured piece
 402:			;                        0 -- White
 403:			;                        1 -- Black
 404:			;             Bit 6  --  Double move flag (set for castling and
 405:			;                        en passant pawn captures)
 406:			;             Bit 5  --  Pawn Promotion flag; set when pawn
 407:			;                        promotes.
 408:			;             Bit 4  --  When set, this flag indicates that
 409:			;                        this is the first move for the
 410:			;                        piece on the move.
 411:			;             Bit 3  --  This flag is set is there is a piece
 412:			;                        captured, and that piece has moved at
 413:			;                        least once.
 414:			;             Bits 2-0   Describe the captured piece.  A
 415:			;                        zero value indicates no capture.
 416:			;
 417:			; MLVAL   --  The field in the move entry which contains the
 418:			;             score assigned to the move.
 419:			;
 420:			;***********************************************************
 421:	0300          	        ORG     START+300H
 422:	0300          	MLIST   DS      2048
 423:	0AF8          	MLEND   EQU     MLIST+2040
 424:	0000          	MLPTR   EQU     0
 425:	0002          	MLFRP   EQU     2
 426:	0003          	MLTOP   EQU     3
 427:	0004          	MLFLG   EQU     4
 428:	0005          	MLVAL   EQU     5
 429:			
 430:			;***********************************************************
 431:			
 432:			;**********************************************************
 433:			; PROGRAM CODE SECTION
 434:			;**********************************************************
 435:			
 436:			;**********************************************************
 437:			; BOARD SETUP ROUTINE
 438:			;***********************************************************
 439:			; FUNCTION:   To initialize the board array, setting the
 440:			;             pieces in their initial positions for the
 441:			;             start of the game.
 442:			;
 443:			; CALLED BY:  DRIVER
 444:			;
 445:			; CALLS:      None
 446:			;
 447:			; ARGUMENTS:  None
 448:			;***********************************************************
 449:	0B00  0678    	INITBD: LD      b,120           ; Pre-fill board with -1's
 450:	0B02  21B400  	        LD      hl,BOARDA
 451:	0B05  36FF    	back01: LD      (hl),-1
 452:	0B07  23      	        INC     hl
 453:	0B08  10FB    	        DJNZ    back01
 454:	0B0A  0608    	        LD      b,8
 455:	0B0C  DD21B400	        LD      ix,BOARDA
 456:	0B10  DD7EF8  	IB2:    LD      a,(ix-8)        ; Fill non-border squares
 457:	0B13  DD7715  	        LD      (ix+21),a       ; White pieces
 458:	0B16  CBFF    	        SET     7,a             ; Change to black
 459:	0B18  DD775B  	        LD      (ix+91),a       ; Black pieces
 460:	0B1B  DD361F01	        LD      (ix+31),PAWN    ; White Pawns
 461:	0B1F  DD365181	        LD      (ix+81),BPAWN   ; Black Pawns
 462:	0B23  DD362900	        LD      (ix+41),0       ; Empty squares
 463:	0B27  DD363300	        LD      (ix+51),0
 464:	0B2B  DD363D00	        LD      (ix+61),0
 465:	0B2F  DD364700	        LD      (ix+71),0
 466:	0B33  DD23    	        INC     ix
 467:	0B35  10D9    	        DJNZ    IB2
 468:	0B37  DD214E01	        LD      ix,POSK         ; Init King/Queen position list
 469:	0B3B  DD360019	        LD      (ix+0),25
 470:	0B3F  DD36015F	        LD      (ix+1),95
 471:	0B43  DD360218	        LD      (ix+2),24
 472:	0B47  DD36035E	        LD      (ix+3),94
 473:	0B4B  C9      	        RET
 474:			
 475:			;***********************************************************
 476:			; PATH ROUTINE
 477:			;***********************************************************
 478:			; FUNCTION:   To generate a single possible move for a given
 479:			;             piece along its current path of motion including:
 480:			
 481:			;                Fetching the contents of the board at the new
 482:			;                position, and setting a flag describing the
 483:			;                contents:
 484:			;                          0  --  New position is empty
 485:			;                          1  --  Encountered a piece of the
 486:			;                                 opposite color
 487:			;                          2  --  Encountered a piece of the
 488:			;                                 same color
 489:			;                          3  --  New position is off the
 490:			;                                 board
 491:			;
 492:			; CALLED BY:  MPIECE
 493:			;             ATTACK
 494:			;             PINFND
 495:			;
 496:			; CALLS:      None
 497:			;
 498:			; ARGUMENTS:  Direction from the direction array giving the
 499:			;             constant to be added for the new position.
 500:			;***********************************************************
 501:	0B4C  210200  	PATH:   LD      hl,M2           ; Get previous position
 502:	0B4F  7E      	        LD      a,(hl)
 503:	0B50  81      	        ADD     a,c             ; Add direction constant
 504:	0B51  77      	        LD      (hl),a          ; Save new position
 505:	0B52  DD2A0200	        LD      ix,(M2)         ; Load board index
 506:	0B56  DD7EB4  	        LD      a,(ix+BOARD)    ; Get contents of board
 507:	0B59  FEFF    	        CP      -1              ; In border area ?
 508:	0B5B  281A    	        JR      Z,PA2           ; Yes - jump
 509:	0B5D  322300  	        LD      (P2),a          ; Save piece
 510:	0B60  E607    	        AND     7               ; Clear flags
 511:	0B62  320A00  	        LD      (T2),a          ; Save piece type
 512:	0B65  C8      	        RET     Z               ; Return if empty
 513:	0B66  3A2300  	        LD      a,(P2)          ; Get piece encountered
 514:	0B69  212200  	        LD      hl,P1           ; Get moving piece address
 515:	0B6C  AE      	        XOR     (hl)            ; Compare
 516:	0B6D  CB7F    	        BIT     7,a             ; Do colors match ?
 517:	0B6F  2803    	        JR      Z,PA1           ; Yes - jump
 518:	0B71  3E01    	        LD      a,1             ; Set different color flag
 519:	0B73  C9      	        RET                     ; Return
 520:	0B74  3E02    	PA1:    LD      a,2             ; Set same color flag
 521:	0B76  C9      	        RET                     ; Return
 522:	0B77  3E03    	PA2:    LD      a,3             ; Set off board flag
 523:	0B79  C9      	        RET                     ; Return
 524:			
 525:			;***********************************************************
 526:			; PIECE MOVER ROUTINE
 527:			;***********************************************************
 528:			; FUNCTION:   To generate all the possible legal moves for a
 529:			;             given piece.
 530:			;
 531:			; CALLED BY:  GENMOV
 532:			;
 533:			; CALLS:      PATH
 534:			;             ADMOVE
 535:			;             CASTLE
 536:			;             ENPSNT
 537:			;
 538:			; ARGUMENTS:  The piece to be moved.
 539:			;***********************************************************
 540:	0B7A  AE      	MPIECE: XOR     (hl)            ; Piece to move
 541:	0B7B  E687    	        AND     87H             ; Clear flag bit
 542:	0B7D  FE81    	        CP      BPAWN           ; Is it a black Pawn ?
 543:	0B7F  2001    	        JR      NZ,rel001       ; No-Skip
 544:	0B81  3D      	        DEC     a               ; Decrement for black Pawns
 545:	0B82  E607    	rel001: AND     7               ; Get piece type
 546:	0B84  320800  	        LD      (T1),a          ; Save piece type
 547:	0B87  FD2A0800	        LD      iy,(T1)         ; Load index to DCOUNT/DPOINT
 548:	0B8B  FD469F  	        LD      b,(iy+DCOUNT)   ; Get direction count
 549:	0B8E  FD7E98  	        LD      a,(iy+DPOINT)   ; Get direction pointer
 550:	0B91  321000  	        LD      (INDX2),a       ; Save as index to direct
 551:	0B94  FD2A1000	        LD      iy,(INDX2)      ; Load index
 552:	0B98  FD4E80  	MP5:    LD      c,(iy+DIRECT)   ; Get move direction
 553:	0B9B  3A0000  	        LD      a,(M1)          ; From position
 554:	0B9E  320200  	        LD      (M2),a          ; Initialize to position
 555:	0BA1  CD4C0B  	MP10:   CALL    PATH            ; Calculate next position
 556:	0BA4  FE02    	        CP      2               ; Ready for new direction ?
 557:	0BA6  301A    	        JR      NC,MP15         ; Yes - Jump
 558:	0BA8  A7      	        AND     a               ; Test for empty square
 559:	0BA9  08      	        EX      af,af'          ; Save result
 560:	0BAA  3A0800  	        LD      a,(T1)          ; Get piece moved
 561:	0BAD  FE02    	        CP      PAWN+1          ; Is it a Pawn ?
 562:	0BAF  381E    	        JR      C,MP20          ; Yes - Jump
 563:	0BB1  CD100D  	        CALL    ADMOVE          ; Add move to list
 564:	0BB4  08      	        EX      af,af'          ; Empty square ?
 565:	0BB5  200B    	        JR      NZ,MP15         ; No - Jump
 566:	0BB7  3A0800  	        LD      a,(T1)          ; Piece type
 567:	0BBA  FE06    	        CP      KING            ; King ?
 568:	0BBC  2804    	        JR      Z,MP15          ; Yes - Jump
 569:	0BBE  FE03    	        CP      BISHOP          ; Bishop, Rook, or Queen ?
 570:	0BC0  30DF    	        JR      NC,MP10         ; Yes - Jump
 571:	0BC2  FD23    	MP15:   INC     iy              ; Increment direction index
 572:	0BC4  10D2    	        DJNZ    MP5             ; Decr. count-jump if non-zerc
 573:	0BC6  3A0800  	        LD      a,(T1)          ; Piece type
 574:	0BC9  FE06    	        CP      KING            ; King ?
 575:	0BCB  CC920C  	        CALL    Z,CASTLE        ; Yes - Try Castling
 576:	0BCE  C9      	        RET                     ; Return
 577:			; ***** PAWN LOGIC *****
 578:	0BCF  78      	MP20:   LD      a,b             ; Counter for direction
 579:	0BD0  FE03    	        CP      3               ; On diagonal moves ?
 580:	0BD2  382E    	        JR      C,MP35          ; Yes - Jump
 581:	0BD4  2823    	        JR      Z,MP30          ; -or-jump if on 2 square move
 582:	0BD6  08      	        EX      af,af'          ; Is forward square empty?
 583:	0BD7  20E9    	        JR      NZ,MP15         ; No - jump
 584:	0BD9  3A0200  	        LD      a,(M2)          ; Get "to" position
 585:	0BDC  FE5B    	        CP      91              ; Promote white Pawn ?
 586:	0BDE  3004    	        JR      NC,MP25         ; Yes - Jump
 587:	0BE0  FE1D    	        CP      29              ; Promote black Pawn ?
 588:	0BE2  3005    	        JR      NC,MP26         ; No - Jump
 589:	0BE4  212300  	MP25:   LD      hl,P2           ; Flag address
 590:	0BE7  CBEE    	        SET     5,(hl)          ; Set promote flag
 591:	0BE9  CD100D  	MP26:   CALL    ADMOVE          ; Add to move list
 592:	0BEC  FD23    	        INC     iy              ; Adjust to two square move
 593:	0BEE  05      	        DEC     b
 594:	0BEF  212200  	        LD      hl,P1           ; Check Pawn moved flag
 595:	0BF2  CB5E    	        BIT     3,(hl)          ; Has it moved before ?
 596:	0BF4  28AB    	        JR      Z,MP10          ; No - Jump
 597:	0BF6  C3C20B  	        JP      MP15            ; Jump
 598:	0BF9  08      	MP30:   EX      af,af'          ; Is forward square empty ?
 599:	0BFA  20C6    	        JR      NZ,MP15         ; No - Jump
 600:	0BFC  CD100D  	MP31:   CALL    ADMOVE          ; Add to move list
 601:	0BFF  C3C20B  	        JP      MP15            ; Jump
 602:	0C02  08      	MP35:   EX      af,af'          ; Is diagonal square empty ?
 603:	0C03  2812    	        JR      Z,MP36          ; Yes - Jump
 604:	0C05  3A0200  	        LD      a,(M2)          ; Get "to" position
 605:	0C08  FE5B    	        CP      91              ; Promote white Pawn ?
 606:	0C0A  3004    	        JR      NC,MP37         ; Yes - Jump
 607:	0C0C  FE1D    	        CP      29              ; Black Pawn promotion ?
 608:	0C0E  30EC    	        JR      NC,MP31         ; No- Jump
 609:	0C10  212300  	MP37:   LD      hl,P2           ; Get flag address
 610:	0C13  CBEE    	        SET     5,(hl)          ; Set promote flag
 611:	0C15  18E5    	        JR      MP31            ; Jump
 612:	0C17  CD1D0C  	MP36:   CALL    ENPSNT          ; Try en passant capture
 613:	0C1A  C3C20B  	        JP      MP15            ; Jump
 614:			
 615:			;***********************************************************
 616:			; EN PASSANT ROUTINE
 617:			;***********************************************************
 618:			; FUNCTION:   --  To test for en passant Pawn capture and
 619:			;                 to add it to the move list if it is
 620:			;                 legal.
 621:			;
 622:			; CALLED BY:  --  MPIECE
 623:			;
 624:			; CALLS:      --  ADMOVE
 625:			;                 ADJPTR
 626:			;
 627:			; ARGUMENTS:  --  None
 628:			;***********************************************************
 629:	0C1D  3A0000  	ENPSNT: LD      a,(M1)          ; Set position of Pawn
 630:	0C20  212200  	        LD      hl,P1           ; Check color
 631:	0C23  CB7E    	        BIT     7,(hl)          ; Is it white ?
 632:	0C25  2802    	        JR      Z,rel002        ; Yes - skip
 633:	0C27  C60A    	        ADD     a,10            ; Add 10 for black
 634:	0C29  FE3D    	rel002: CP      61              ; On en passant capture rank ?
 635:	0C2B  D8      	        RET     C               ; No - return
 636:	0C2C  FE45    	        CP      69              ; On en passant capture rank ?
 637:	0C2E  D0      	        RET     NC              ; No - return
 638:	0C2F  DD2A1600	        LD      ix,(MLPTRJ)     ; Get pointer to previous move
 639:	0C33  DDCB0466	        BIT     4,(ix+MLFLG)    ; First move for that piece ?
 640:	0C37  C8      	        RET     Z               ; No - return
 641:	0C38  DD7E03  	        LD      a,(ix+MLTOP)    ; Get "to" position
 642:	0C3B  320600  	        LD      (M4),a          ; Store as index to board
 643:	0C3E  DD2A0600	        LD      ix,(M4)         ; Load board index
 644:	0C42  DD7EB4  	        LD      a,(ix+BOARD)    ; Get piece moved
 645:	0C45  322400  	        LD      (P3),a          ; Save it
 646:	0C48  E607    	        AND     7               ; Get piece type
 647:	0C4A  FE01    	        CP      PAWN            ; Is it a Pawn ?
 648:	0C4C  C0      	        RET     NZ              ; No - return
 649:	0C4D  3A0600  	        LD      a,(M4)          ; Get "to" position
 650:	0C50  210200  	        LD      hl,M2           ; Get present "to" position
 651:	0C53  96      	        SUB     (hl)            ; Find difference
 652:	0C54  F2590C  	        JP      P,rel003        ; Positive ? Yes - Jump
 653:	0C57  ED44    	        NEG                     ; Else take absolute value
 654:	0C59  FE0A    	rel003: CP      10              ; Is difference 10 ?
 655:	0C5B  C0      	        RET     NZ              ; No - return
 656:	0C5C  212300  	        LD      hl,P2           ; Address of flags
 657:	0C5F  CBF6    	        SET     6,(hl)          ; Set double move flag
 658:	0C61  CD100D  	        CALL    ADMOVE          ; Add Pawn move to move list
 659:	0C64  3A0000  	        LD      a,(M1)          ; Save initial Pawn position
 660:	0C67  320400  	        LD      (M3),a
 661:	0C6A  3A0600  	        LD      a,(M4)          ; Set "from" and "to" positions
 662:			                                ; for dummy move
 663:	0C6D  320000  	        LD      (M1),a
 664:	0C70  320200  	        LD      (M2),a
 665:	0C73  3A2400  	        LD      a,(P3)          ; Save captured Pawn
 666:	0C76  322300  	        LD      (P2),a
 667:	0C79  CD100D  	        CALL    ADMOVE          ; Add Pawn capture to move list
 668:	0C7C  3A0400  	        LD      a,(M3)          ; Restore "from" position
 669:	0C7F  320000  	        LD      (M1),a
 670:			
 671:			;***********************************************************
 672:			; ADJUST MOVE LIST POINTER FOR DOUBLE MOVE
 673:			;***********************************************************
 674:			; FUNCTION:   --  To adjust move list pointer to link around
 675:			;                 second move in double move.
 676:			;
 677:			; CALLED BY:  --  ENPSNT
 678:			;                 CASTLE
 679:			;                 (This mini-routine is not really called,
 680:			;                 but is jumped to to save time.)
 681:			;
 682:			; CALLS:      --  None
 683:			;
 684:			; ARGUMENTS:  --  None
 685:			;***********************************************************
 686:	0C82  2A1C00  	ADJPTR: LD      hl,(MLLST)      ; Get list pointer
 687:	0C85  11FAFF  	        LD      de,-6           ; Size of a move entry
 688:	0C88  19      	        ADD     hl,de           ; Back up list pointer
 689:	0C89  221C00  	        LD      (MLLST),hl      ; Save list pointer
 690:	0C8C  3600    	        LD      (hl),0          ; Zero out link, first byte
 691:	0C8E  23      	        INC     hl              ; Next byte
 692:	0C8F  3600    	        LD      (hl),0          ; Zero out link, second byte
 693:	0C91  C9      	        RET                     ; Return
 694:			
 695:			;***********************************************************
 696:			; CASTLE ROUTINE
 697:			;***********************************************************
 698:			; FUNCTION:   --  To determine whether castling is legal
 699:			;                 (Queen side, King side, or both) and add it
 700:			;                 to the move list if it is.
 701:			;
 702:			; CALLED BY:  --  MPIECE
 703:			;
 704:			; CALLS:      --  ATTACK
 705:			;                 ADMOVE
 706:			;                 ADJPTR
 707:			;
 708:			; ARGUMENTS:  --  None
 709:			;***********************************************************
 710:	0C92  3A2200  	CASTLE: LD      a,(P1)          ; Get King
 711:	0C95  CB5F    	        BIT     3,a             ; Has it moved ?
 712:	0C97  C0      	        RET     NZ              ; Yes - return
 713:	0C98  3A2900  	        LD      a,(CKFLG)       ; Fetch Check Flag
 714:	0C9B  A7      	        AND     a               ; Is the King in check ?
 715:	0C9C  C0      	        RET     NZ              ; Yes - Return
 716:	0C9D  0103FF  	        LD      bc,0FF03H       ; Initialize King-side values
 717:	0CA0  3A0000  	CA5:    LD      a,(M1)          ; King position
 718:	0CA3  81      	        ADD     a,c             ; Rook position
 719:	0CA4  4F      	        LD      c,a             ; Save
 720:	0CA5  320400  	        LD      (M3),a          ; Store as board index
 721:	0CA8  DD2A0400	        LD      ix,(M3)         ; Load board index
 722:	0CAC  DD7EB4  	        LD      a,(ix+BOARD)    ; Get contents of board
 723:	0CAF  E67F    	        AND     7FH             ; Clear color bit
 724:	0CB1  FE04    	        CP      ROOK            ; Has Rook ever moved ?
 725:	0CB3  2051    	        JR      NZ,CA20         ; Yes - Jump
 726:	0CB5  79      	        LD      a,c             ; Restore Rook position
 727:	0CB6  181E    	        JR      CA15            ; Jump
 728:	0CB8  DD2A0400	CA10:   LD      ix,(M3)         ; Load board index
 729:	0CBC  DD7EB4  	        LD      a,(ix+BOARD)    ; Get contents of board
 730:	0CBF  A7      	        AND     a               ; Empty ?
 731:	0CC0  2044    	        JR      NZ,CA20         ; No - Jump
 732:	0CC2  3A0400  	        LD      a,(M3)          ; Current position
 733:	0CC5  FE16    	        CP      22              ; White Queen Knight square ?
 734:	0CC7  280D    	        JR      Z,CA15          ; Yes - Jump
 735:	0CC9  FE5C    	        CP      92              ; Black Queen Knight square ?
 736:	0CCB  2809    	        JR      Z,CA15          ; Yes - Jump
 737:	0CCD  CDB90D  	        CALL    ATTACK          ; Look for attack on square
 738:	0CD0  A7      	        AND     a               ; Any attackers ?
 739:	0CD1  2033    	        JR      NZ,CA20         ; Yes - Jump
 740:	0CD3  3A0400  	        LD      a,(M3)          ; Current position
 741:	0CD6  80      	CA15:   ADD     a,b             ; Next position
 742:	0CD7  320400  	        LD      (M3),a          ; Save as board index
 743:	0CDA  210000  	        LD      hl,M1           ; King position
 744:	0CDD  BE      	        CP      (hl)            ; Reached King ?
 745:	0CDE  20D8    	        JR      NZ,CA10         ; No - jump
 746:	0CE0  90      	        SUB     b               ; Determine King's position
 747:	0CE1  90      	        SUB     b
 748:	0CE2  320200  	        LD      (M2),a          ; Save it
 749:	0CE5  212300  	        LD      hl,P2           ; Address of flags
 750:	0CE8  3640    	        LD      (hl),40H        ; Set double move flag
 751:	0CEA  CD100D  	        CALL    ADMOVE          ; Put king move in list
 752:	0CED  210000  	        LD      hl,M1           ; Addr of King "from" position
 753:	0CF0  7E      	        LD      a,(hl)          ; Get King's "from" position
 754:	0CF1  71      	        LD      (hl),c          ; Store Rook "from" position
 755:	0CF2  90      	        SUB     b               ; Get Rook "to" position
 756:	0CF3  320200  	        LD      (M2),a          ; Store Rook "to" position
 757:	0CF6  AF      	        XOR     a               ; Zero
 758:	0CF7  322300  	        LD      (P2),a          ; Zero move flags
 759:	0CFA  CD100D  	        CALL    ADMOVE          ; Put Rook move in list
 760:	0CFD  CD820C  	        CALL    ADJPTR          ; Re-adjust move list pointer
 761:	0D00  3A0400  	        LD      a,(M3)          ; Restore King position
 762:	0D03  320000  	        LD      (M1),a          ; Store
 763:	0D06  78      	CA20:   LD      a,b             ; Scan Index
 764:	0D07  FE01    	        CP      1               ; Done ?
 765:	0D09  C8      	        RET     Z               ; Yes - return
 766:	0D0A  01FC01  	        LD      bc,01FCH        ; Set Queen-side initial values
 767:	0D0D  C3A00C  	        JP      CA5             ; Jump
 768:			
 769:			;***********************************************************
 770:			; ADMOVE ROUTINE
 771:			;***********************************************************
 772:			; FUNCTION:   --  To add a move to the move list
 773:			;
 774:			; CALLED BY:  --  MPIECE
 775:			;                 ENPSNT
 776:			;                 CASTLE
 777:			;
 778:			; CALLS:      --  None
 779:			;
 780:			; ARGUMENT:  --  None
 781:			;***********************************************************
 782:	0D10  ED5B1E00	ADMOVE: LD      de,(MLNXT)      ; Addr of next loc in move list
 783:	0D14  21F80A  	        LD      hl,MLEND        ; Address of list end
 784:	0D17  A7      	        AND     a               ; Clear carry flag
 785:	0D18  ED52    	        SBC     hl,de           ; Calculate difference
 786:	0D1A  3833    	        JR      C,AM10          ; Jump if out of space
 787:	0D1C  2A1C00  	        LD      hl,(MLLST)      ; Addr of prev. list area
 788:	0D1F  ED531C00	        LD      (MLLST),de      ; Save next as previous
 789:	0D23  73      	        LD      (hl),e          ; Store link address
 790:	0D24  23      	        INC     hl
 791:	0D25  72      	        LD      (hl),d
 792:	0D26  212200  	        LD      hl,P1           ; Address of moved piece
 793:	0D29  CB5E    	        BIT     3,(hl)          ; Has it moved before ?
 794:	0D2B  2005    	        JR      NZ,rel004       ; Yes - jump
 795:	0D2D  212300  	        LD      hl,P2           ; Address of move flags
 796:	0D30  CBE6    	        SET     4,(hl)          ; Set first move flag
 797:	0D32  EB      	rel004: EX      de,hl           ; Address of move area
 798:	0D33  3600    	        LD      (hl),0          ; Store zero in link address
 799:	0D35  23      	        INC     hl
 800:	0D36  3600    	        LD      (hl),0
 801:	0D38  23      	        INC     hl
 802:	0D39  3A0000  	        LD      a,(M1)          ; Store "from" move position
 803:	0D3C  77      	        LD      (hl),a
 804:	0D3D  23      	        INC     hl
 805:	0D3E  3A0200  	        LD      a,(M2)          ; Store "to" move position
 806:	0D41  77      	        LD      (hl),a
 807:	0D42  23      	        INC     hl
 808:	0D43  3A2300  	        LD      a,(P2)          ; Store move flags/capt. piece
 809:	0D46  77      	        LD      (hl),a
 810:	0D47  23      	        INC     hl
 811:	0D48  3600    	        LD      (hl),0          ; Store initial move value
 812:	0D4A  23      	        INC     hl
 813:	0D4B  221E00  	        LD      (MLNXT),hl      ; Save address for next move
 814:	0D4E  C9      	        RET                     ; Return
 815:	0D4F  3600    	AM10:   LD      (hl),0          ; Abort entry on table ovflow
 816:	0D51  23      	        INC     hl
 817:	0D52  3600    	        LD      (hl),0          ; TODO does this out of memory
 818:	0D54  2B      	        DEC     hl              ;      check actually work?
 819:	0D55  C9      	        RET
 820:			
 821:			;***********************************************************
 822:			; GENERATE MOVE ROUTINE
 823:			;***********************************************************
 824:			; FUNCTION:  --  To generate the move set for all of the
 825:			;                pieces of a given color.
 826:			;
 827:			; CALLED BY: --  FNDMOV
 828:			;
 829:			; CALLS:     --  MPIECE
 830:			;                INCHK
 831:			;
 832:			; ARGUMENTS: --  None
 833:			;***********************************************************
 834:	0D56  CD980D  	GENMOV: CALL    INCHK           ; Test for King in check
 835:	0D59  322900  	        LD      (CKFLG),a       ; Save attack count as flag
 836:	0D5C  ED5B1E00	        LD      de,(MLNXT)      ; Addr of next avail list space
 837:	0D60  2A1400  	        LD      hl,(MLPTRI)     ; Ply list pointer index
 838:	0D63  23      	        INC     hl              ; Increment to next ply
 839:	0D64  23      	        INC     hl
 840:	0D65  73      	        LD      (hl),e          ; Save move list pointer
 841:	0D66  23      	        INC     hl
 842:	0D67  72      	        LD      (hl),d
 843:	0D68  23      	        INC     hl
 844:	0D69  221400  	        LD      (MLPTRI),hl     ; Save new index
 845:	0D6C  221C00  	        LD      (MLLST),hl      ; Last pointer for chain init.
 846:	0D6F  3E15    	        LD      a,21            ; First position on board
 847:	0D71  320000  	GM5:    LD      (M1),a          ; Save as index
 848:	0D74  DD2A0000	        LD      ix,(M1)         ; Load board index
 849:	0D78  DD7EB4  	        LD      a,(ix+BOARD)    ; Fetch board contents
 850:	0D7B  A7      	        AND     a               ; Is it empty ?
 851:	0D7C  2810    	        JR      Z,GM10          ; Yes - Jump
 852:	0D7E  FEFF    	        CP      -1              ; Is it a border square ?
 853:	0D80  280C    	        JR      Z,GM10          ; Yes - Jump
 854:	0D82  322200  	        LD      (P1),a          ; Save piece
 855:	0D85  212100  	        LD      hl,COLOR        ; Address of color of piece
 856:	0D88  AE      	        XOR     (hl)            ; Test color of piece
 857:	0D89  CB7F    	        BIT     7,a             ; Match ?
 858:	0D8B  CC7A0B  	        CALL    Z,MPIECE        ; Yes - call Move Piece
 859:	0D8E  3A0000  	GM10:   LD      a,(M1)          ; Fetch current board position
 860:	0D91  3C      	        INC     a               ; Incr to next board position
 861:	0D92  FE63    	        CP      99              ; End of board array ?
 862:	0D94  C2710D  	        JP      NZ,GM5          ; No - Jump
 863:	0D97  C9      	        RET                     ; Return
 864:			
 865:			;***********************************************************
 866:			; CHECK ROUTINE
 867:			;***********************************************************
 868:			; FUNCTION:   --  To determine whether or not the
 869:			;                 King is in check.
 870:			;
 871:			; CALLED BY:  --  GENMOV
 872:			;                 FNDMOV
 873:			;                 EVAL
 874:			;
 875:			; CALLS:      --  ATTACK
 876:			;
 877:			; ARGUMENTS:  --  Color of King
 878:			;***********************************************************
 879:	0D98  3A2100  	INCHK:  LD      a,(COLOR)       ; Get color
 880:	0D9B  214E01  	INCHK1: LD      hl,POSK         ; Addr of white King position
 881:	0D9E  A7      	        AND     a               ; White ?
 882:	0D9F  2801    	        JR      Z,rel005        ; Yes - Skip
 883:	0DA1  23      	        INC     hl              ; Addr of black King position
 884:	0DA2  7E      	rel005: LD      a,(hl)          ; Fetch King position
 885:	0DA3  320400  	        LD      (M3),a          ; Save
 886:	0DA6  DD2A0400	        LD      ix,(M3)         ; Load board index
 887:	0DAA  DD7EB4  	        LD      a,(ix+BOARD)    ; Fetch board contents
 888:	0DAD  322200  	        LD      (P1),a          ; Save
 889:	0DB0  E607    	        AND     7               ; Get piece type
 890:	0DB2  320800  	        LD      (T1),a          ; Save
 891:	0DB5  CDB90D  	        CALL    ATTACK          ; Look for attackers on King
 892:	0DB8  C9      	        RET                     ; Return
 893:			
 894:			;***********************************************************
 895:			; ATTACK ROUTINE
 896:			;***********************************************************
 897:			; FUNCTION:   --  To find all attackers on a given square
 898:			;                 by scanning outward from the square
 899:			;                 until a piece is found that attacks
 900:			;                 that square, or a piece is found that
 901:			;                 doesn't attack that square, or the edge
 902:			;                 of the board is reached.
 903:			;
 904:			;                 In determining which pieces attack
 905:			;                 a square, this routine also takes into
 906:			;                 account the ability of certain pieces to
 907:			;                 attack through another attacking piece. (For
 908:			;                 example a queen lined up behind a bishop
 909:			;                 of her same color along a diagonal.) The
 910:			;                 bishop is then said to be transparent to the
 911:			;                 queen, since both participate in the
 912:			;                 attack.
 913:			;
 914:			;                 In the case where this routine is called
 915:			;                 by CASTLE or INCHK, the routine is
 916:			;                 terminated as soon as an attacker of the
 917:			;                 opposite color is encountered.
 918:			;
 919:			; CALLED BY:  --  POINTS
 920:			;                 PINFND
 921:			;                 CASTLE
 922:			;                 INCHK
 923:			;
 924:			; CALLS:      --  PATH
 925:			;                 ATKSAV
 926:			;
 927:			; ARGUMENTS:  --  None
 928:			;***********************************************************
 929:	0DB9  C5      	ATTACK: PUSH    bc              ; Save Register B
 930:	0DBA  AF      	        XOR     a               ; Clear
 931:	0DBB  0610    	        LD      b,16            ; Initial direction count
 932:	0DBD  321000  	        LD      (INDX2),a       ; Initial direction index
 933:	0DC0  FD2A1000	        LD      iy,(INDX2)      ; Load index
 934:	0DC4  FD4E80  	AT5:    LD      c,(iy+DIRECT)   ; Get direction
 935:	0DC7  1600    	        LD      d,0             ; Init. scan count/flags
 936:	0DC9  3A0400  	        LD      a,(M3)          ; Init. board start position
 937:	0DCC  320200  	        LD      (M2),a          ; Save
 938:	0DCF  14      	AT10:   INC     d               ; Increment scan count
 939:	0DD0  CD4C0B  	        CALL    PATH            ; Next position
 940:	0DD3  FE01    	        CP      1               ; Piece of a opposite color ?
 941:	0DD5  2813    	        JR      Z,AT14A         ; Yes - jump
 942:	0DD7  FE02    	        CP      2               ; Piece of same color ?
 943:	0DD9  2818    	        JR      Z,AT14B         ; Yes - jump
 944:	0DDB  A7      	        AND     a               ; Empty position ?
 945:	0DDC  2005    	        JR      NZ,AT12         ; No - jump
 946:	0DDE  78      	        LD      a,b             ; Fetch direction count
 947:	0DDF  FE09    	        CP      9               ; On knight scan ?
 948:	0DE1  30EC    	        JR      NC,AT10         ; No - jump
 949:	0DE3  FD23    	AT12:   INC     iy              ; Increment direction index
 950:	0DE5  10DD    	        DJNZ    AT5             ; Done ? No - jump
 951:	0DE7  AF      	        XOR     a               ; No attackers
 952:	0DE8  C1      	AT13:   POP     bc              ; Restore register B
 953:	0DE9  C9      	        RET                     ; Return
 954:	0DEA  CB72    	AT14A:  BIT     6,d             ; Same color found already ?
 955:	0DEC  20F5    	        JR      NZ,AT12         ; Yes - jump
 956:	0DEE  CBEA    	        SET     5,d             ; Set opposite color found flag
 957:	0DF0  C3F90D  	        JP      AT14            ; Jump
 958:	0DF3  CB6A    	AT14B:  BIT     5,d             ; Opposite color found already?
 959:	0DF5  20EC    	        JR      NZ,AT12         ; Yes - jump
 960:	0DF7  CBF2    	        SET     6,d             ; Set same color found flag
 961:			
 962:			;
 963:			; ***** DETERMINE IF PIECE ENCOUNTERED ATTACKS SQUARE *****
 964:	0DF9  3A0A00  	AT14:   LD      a,(T2)          ; Fetch piece type encountered
 965:	0DFC  5F      	        LD      e,a             ; Save
 966:	0DFD  78      	        LD      a,b             ; Get direction-counter
 967:	0DFE  FE09    	        CP      9               ; Look for Knights ?
 968:	0E00  3845    	        JR      C,AT25          ; Yes - jump
 969:	0E02  7B      	        LD      a,e             ; Get piece type
 970:	0E03  FE05    	        CP      QUEEN           ; Is is a Queen ?
 971:	0E05  2004    	        JR      NZ,AT15         ; No - Jump
 972:	0E07  CBFA    	        SET     7,d             ; Set Queen found flag
 973:	0E09  1841    	        JR      AT30            ; Jump
 974:	0E0B  7A      	AT15:   LD      a,d             ; Get flag/scan count
 975:	0E0C  E60F    	        AND     0FH             ; Isolate count
 976:	0E0E  FE01    	        CP      1               ; On first position ?
 977:	0E10  2005    	        JR      NZ,AT16         ; No - jump
 978:	0E12  7B      	        LD      a,e             ; Get encountered piece type
 979:	0E13  FE06    	        CP      KING            ; Is it a King ?
 980:	0E15  2835    	        JR      Z,AT30          ; Yes - jump
 981:	0E17  78      	AT16:   LD      a,b             ; Get direction counter
 982:	0E18  FE0D    	        CP      13              ; Scanning files or ranks ?
 983:	0E1A  3824    	        JR      C,AT21          ; Yes - jump
 984:	0E1C  7B      	        LD      a,e             ; Get piece type
 985:	0E1D  FE03    	        CP      BISHOP          ; Is it a Bishop ?
 986:	0E1F  282B    	        JR      Z,AT30          ; Yes - jump
 987:	0E21  7A      	        LD      a,d             ; Get flags/scan count
 988:	0E22  E60F    	        AND     0FH             ; Isolate count
 989:	0E24  FE01    	        CP      1               ; On first position ?
 990:	0E26  20BB    	        JR      NZ,AT12         ; No - jump
 991:	0E28  BB      	        CP      e               ; Is it a Pawn ?
 992:	0E29  20B8    	        JR      NZ,AT12         ; No - jump
 993:	0E2B  3A2300  	        LD      a,(P2)          ; Fetch piece including color
 994:	0E2E  CB7F    	        BIT     7,a             ; Is it white ?
 995:	0E30  2807    	        JR      Z,AT20          ; Yes - jump
 996:	0E32  78      	        LD      a,b             ; Get direction counter
 997:	0E33  FE0F    	        CP      15              ; On a non-attacking diagonal ?
 998:	0E35  38AC    	        JR      C,AT12          ; Yes - jump
 999:	0E37  1813    	        JR      AT30            ; Jump
1000:	0E39  78      	AT20:   LD      a,b             ; Get direction counter
1001:	0E3A  FE0F    	        CP      15              ; On a non-attacking diagonal ?
1002:	0E3C  30A5    	        JR      NC,AT12         ; Yes - jump
1003:	0E3E  180C    	        JR      AT30            ; Jump
1004:	0E40  7B      	AT21:   LD      a,e             ; Get piece type
1005:	0E41  FE04    	        CP      ROOK            ; Is is a Rook ?
1006:	0E43  209E    	        JR      NZ,AT12         ; No - jump
1007:	0E45  1805    	        JR      AT30            ; Jump
1008:	0E47  7B      	AT25:   LD      a,e             ; Get piece type
1009:	0E48  FE02    	        CP      KNIGHT          ; Is it a Knight ?
1010:	0E4A  2097    	        JR      NZ,AT12         ; No - jump
1011:	0E4C  3A0800  	AT30:   LD      a,(T1)          ; Attacked piece type/flag
1012:	0E4F  FE07    	        CP      7               ; Call from POINTS ?
1013:	0E51  2809    	        JR      Z,AT31          ; Yes - jump
1014:	0E53  CB6A    	        BIT     5,d             ; Is attacker opposite color ?
1015:	0E55  2808    	        JR      Z,AT32          ; No - jump
1016:	0E57  3E01    	        LD      a,1             ; Set attacker found flag
1017:	0E59  C3E80D  	        JP      AT13            ; Jump
1018:	0E5C  CD6F0E  	AT31:   CALL    ATKSAV          ; Save attacker in attack list
1019:	0E5F  3A0A00  	AT32:   LD      a,(T2)          ; Attacking piece type
1020:	0E62  FE06    	        CP      KING            ; Is it a King,?
1021:	0E64  CAE30D  	        JP      Z,AT12          ; Yes - jump
1022:	0E67  FE02    	        CP      KNIGHT          ; Is it a Knight ?
1023:	0E69  CAE30D  	        JP      Z,AT12          ; Yes - jump
1024:	0E6C  C3CF0D  	        JP      AT10            ; Jump
1025:			
1026:			;***********************************************************
1027:			; ATTACK SAVE ROUTINE
1028:			;***********************************************************
1029:			; FUNCTION:   --  To save an attacking piece value in the
1030:			;                 attack list, and to increment the attack
1031:			;                 count for that color piece.
1032:			;
1033:			;                 The pin piece list is checked for the
1034:			;                 attacking piece, and if found there, the
1035:			;                 piece is not included in the attack list.
1036:			;
1037:			; CALLED BY:  --  ATTACK
1038:			;
1039:			; CALLS:      --  PNCK
1040:			;
1041:			; ARGUMENTS:  --  None
1042:			;***********************************************************
1043:	0E6F  C5      	ATKSAV: PUSH    bc              ; Save Regs BC
1044:	0E70  D5      	        PUSH    de              ; Save Regs DE
1045:	0E71  3A1200  	        LD      a,(NPINS)       ; Number of pinned pieces
1046:	0E74  A7      	        AND     a               ; Any ?
1047:	0E75  C4B70E  	        CALL    NZ,PNCK         ; yes - check pin list
1048:	0E78  DD2A0A00	        LD      ix,(T2)         ; Init index to value table
1049:	0E7C  212C01  	        LD      hl,ATKLST       ; Init address of attack list
1050:	0E7F  010000  	        LD      bc,0            ; Init increment for white
1051:	0E82  3A2300  	        LD      a,(P2)          ; Attacking piece
1052:	0E85  CB7F    	        BIT     7,a             ; Is it white ?
1053:	0E87  2802    	        JR      Z,rel006        ; Yes - jump
1054:	0E89  0E07    	        LD      c,7             ; Init increment for black
1055:	0E8B  E607    	rel006: AND     7               ; Attacking piece type
1056:	0E8D  5F      	        LD      e,a             ; Init increment for type
1057:	0E8E  CB7A    	        BIT     7,d             ; Queen found this scan ?
1058:	0E90  2802    	        JR      Z,rel007        ; No - jump
1059:	0E92  1E05    	        LD      e,QUEEN         ; Use Queen slot in attack list
1060:	0E94  09      	rel007: ADD     hl,bc           ; Attack list address
1061:	0E95  34      	        INC     (hl)            ; Increment list count
1062:	0E96  1600    	        LD      d,0
1063:	0E98  19      	        ADD     hl,de           ; Attack list slot address
1064:	0E99  7E      	        LD      a,(hl)          ; Get data already there
1065:	0E9A  E60F    	        AND     0FH             ; Is first slot empty ?
1066:	0E9C  2811    	        JR      Z,AS20          ; Yes - jump
1067:	0E9E  7E      	        LD      a,(hl)          ; Get data again
1068:	0E9F  E6F0    	        AND     0F0H            ; Is second slot empty ?
1069:	0EA1  2803    	        JR      Z,AS19          ; Yes - jump
1070:	0EA3  23      	        INC     hl              ; Increment to King slot
1071:	0EA4  1809    	        JR      AS20            ; Jump
1072:	0EA6  ED6F    	AS19:   RLD                     ; Temp save lower in upper
1073:	0EA8  DD7EA5  	        LD      a,(ix+PVALUE)   ; Get new value for attack list
1074:	0EAB  ED67    	        RRD                     ; Put in 2nd attack list slot
1075:	0EAD  1805    	        JR      AS25            ; Jump
1076:	0EAF  DD7EA5  	AS20:   LD      a,(ix+PVALUE)   ; Get new value for attack list
1077:	0EB2  ED6F    	        RLD                     ; Put in 1st attack list slot
1078:	0EB4  D1      	AS25:   POP     de              ; Restore DE regs
1079:	0EB5  C1      	        POP     bc              ; Restore BC regs
1080:	0EB6  C9      	        RET                     ; Return
1081:			
1082:			;***********************************************************
1083:			; PIN CHECK ROUTINE
1084:			;***********************************************************
1085:			; FUNCTION:   --  Checks to see if the attacker is in the
1086:			;                 pinned piece list. If so he is not a valid
1087:			;                 attacker unless the direction in which he
1088:			;                 attacks is the same as the direction along
1089:			;                 which he is pinned. If the piece is
1090:			;                 found to be invalid as an attacker, the
1091:			;                 return to the calling routine is aborted
1092:			;                 and this routine returns directly to ATTACK.
1093:			;
1094:			; CALLED BY:  --  ATKSAV
1095:			;
1096:			; CALLS:      --  None
1097:			;
1098:			; ARGUMENTS:  --  The direction of the attack. The
1099:			;                 pinned piece counnt.
1100:			;***********************************************************
1101:	0EB7  51      	PNCK:   LD      d,c             ; Save attack direction
1102:	0EB8  1E00    	        LD      e,0             ; Clear flag
1103:	0EBA  4F      	        LD      c,a             ; Load pin count for search
1104:	0EBB  0600    	        LD      b,0
1105:	0EBD  3A0200  	        LD      a,(M2)          ; Position of piece
1106:	0EC0  213A01  	        LD      hl,PLISTA       ; Pin list address
1107:	0EC3  EDB1    	PC1:    CPIR                    ; Search list for position
1108:	0EC5  C0      	        RET     NZ              ; Return if not found
1109:	0EC6  08      	        EX      af,af'          ; Save search parameters
1110:	0EC7  CB43    	        BIT     0,e             ; Is this the first find ?
1111:	0EC9  2015    	        JR      NZ,PC5          ; No - jump
1112:	0ECB  CBC3    	        SET     0,e             ; Set first find flag
1113:	0ECD  E5      	        PUSH    hl              ; Get corresp index to dir list
1114:	0ECE  DDE1    	        POP     ix
1115:	0ED0  DD7E09  	        LD      a,(ix+9)        ; Get direction
1116:	0ED3  BA      	        CP      d               ; Same as attacking direction ?
1117:	0ED4  2805    	        JR      Z,PC3           ; Yes - jump
1118:	0ED6  ED44    	        NEG                     ; Opposite direction ?
1119:	0ED8  BA      	        CP      d               ; Same as attacking direction ?
1120:	0ED9  2005    	        JR      NZ,PC5          ; No - jump
1121:	0EDB  08      	PC3:    EX      af,af'          ; Restore search parameters
1122:	0EDC  EAC30E  	        JP      PE,PC1          ; Jump if search not complete
1123:	0EDF  C9      	        RET                     ; Return
1124:	0EE0  F1      	PC5:    POP     af              ; Abnormal exit
1125:	0EE1  D1      	        POP     de              ; Restore regs.
1126:	0EE2  C1      	        POP     bc
1127:	0EE3  C9      	        RET                     ; Return to ATTACK
1128:			
1129:			;***********************************************************
1130:			; PIN FIND ROUTINE
1131:			;***********************************************************
1132:			; FUNCTION:   --  To produce a list of all pieces pinned
1133:			;                 against the King or Queen, for both white
1134:			;                 and black.
1135:			;
1136:			; CALLED BY:  --  FNDMOV
1137:			;                 EVAL
1138:			;
1139:			; CALLS:      --  PATH
1140:			;                 ATTACK
1141:			;
1142:			; ARGUMENTS:  --  None
1143:			;***********************************************************
1144:	0EE4  AF      	PINFND: XOR     a               ; Zero pin count
1145:	0EE5  321200  	        LD      (NPINS),a
1146:	0EE8  114E01  	        LD      de,POSK         ; Addr of King/Queen pos list
1147:	0EEB  1A      	PF1:    LD      a,(de)          ; Get position of royal piece
1148:	0EEC  A7      	        AND     a               ; Is it on board ?
1149:	0EED  CAA70F  	        JP      Z,PF26          ; No- jump
1150:	0EF0  FEFF    	        CP      -1              ; At end of list ?
1151:	0EF2  C8      	        RET     Z               ; Yes return
1152:	0EF3  320400  	        LD      (M3),a          ; Save position as board index
1153:	0EF6  DD2A0400	        LD      ix,(M3)         ; Load index to board
1154:	0EFA  DD7EB4  	        LD      a,(ix+BOARD)    ; Get contents of board
1155:	0EFD  322200  	        LD      (P1),a          ; Save
1156:	0F00  0608    	        LD      b,8             ; Init scan direction count
1157:	0F02  AF      	        XOR     a
1158:	0F03  321000  	        LD      (INDX2),a       ; Init direction index
1159:	0F06  FD2A1000	        LD      iy,(INDX2)
1160:	0F0A  3A0400  	PF2:    LD      a,(M3)          ; Get King/Queen position
1161:	0F0D  320200  	        LD      (M2),a          ; Save
1162:	0F10  AF      	        XOR     a
1163:	0F11  320600  	        LD      (M4),a          ; Clear pinned piece saved pos
1164:	0F14  FD4E80  	        LD      c,(iy+DIRECT)   ; Get direction of scan
1165:	0F17  CD4C0B  	PF5:    CALL    PATH            ; Compute next position
1166:	0F1A  A7      	        AND     a               ; Is it empty ?
1167:	0F1B  28FA    	        JR      Z,PF5           ; Yes - jump
1168:	0F1D  FE03    	        CP      3               ; Off board ?
1169:	0F1F  CAA30F  	        JP      Z,PF25          ; Yes - jump
1170:	0F22  FE02    	        CP      2               ; Piece of same color
1171:	0F24  3A0600  	        LD      a,(M4)          ; Load pinned piece position
1172:	0F27  2824    	        JR      Z,PF15          ; Yes - jump
1173:	0F29  A7      	        AND     a               ; Possible pin ?
1174:	0F2A  CAA30F  	        JP      Z,PF25          ; No - jump
1175:	0F2D  3A0A00  	        LD      a,(T2)          ; Piece type encountered
1176:	0F30  FE05    	        CP      QUEEN           ; Queen ?
1177:	0F32  CA5A0F  	        JP      Z,PF19          ; Yes - jump
1178:	0F35  6F      	        LD      l,a             ; Save piece type
1179:	0F36  78      	        LD      a,b             ; Direction counter
1180:	0F37  FE05    	        CP      5               ; Non-diagonal direction ?
1181:	0F39  3809    	        JR      C,PF10          ; Yes - jump
1182:	0F3B  7D      	        LD      a,l             ; Piece type
1183:	0F3C  FE03    	        CP      BISHOP          ; Bishop ?
1184:	0F3E  C2A30F  	        JP      NZ,PF25         ; No - jump
1185:	0F41  C3920F  	        JP      PF20            ; Jump
1186:	0F44  7D      	PF10:   LD      a,l             ; Piece type
1187:	0F45  FE04    	        CP      ROOK            ; Rook ?
1188:	0F47  C2A30F  	        JP      NZ,PF25         ; No - jump
1189:	0F4A  C3920F  	        JP      PF20            ; Jump
1190:	0F4D  A7      	PF15:   AND     a               ; Possible pin ?
1191:	0F4E  C2A30F  	        JP      NZ,PF25         ; No - jump
1192:	0F51  3A0200  	        LD      a,(M2)          ; Save possible pin position
1193:	0F54  320600  	        LD      (M4),a
1194:	0F57  C3170F  	        JP      PF5             ; Jump
1195:	0F5A  3A2200  	PF19:   LD      a,(P1)          ; Load King or Queen
1196:	0F5D  E607    	        AND     7               ; Clear flags
1197:	0F5F  FE05    	        CP      QUEEN           ; Queen ?
1198:	0F61  202F    	        JR      NZ,PF20         ; No - jump
1199:	0F63  C5      	        PUSH    bc              ; Save regs.
1200:	0F64  D5      	        PUSH    de
1201:	0F65  FDE5    	        PUSH    iy
1202:	0F67  AF      	        XOR     a               ; Zero out attack list
1203:	0F68  060E    	        LD      b,14
1204:	0F6A  212C01  	        LD      hl,ATKLST
1205:	0F6D  77      	back02: LD      (hl),a
1206:	0F6E  23      	        INC     hl
1207:	0F6F  10FC    	        DJNZ    back02
1208:	0F71  3E07    	        LD      a,7             ; Set attack flag
1209:	0F73  320800  	        LD      (T1),a
1210:	0F76  CDB90D  	        CALL    ATTACK          ; Find attackers/defenders
1211:	0F79  212C01  	        LD      hl,WACT         ; White queen attackers
1212:	0F7C  113301  	        LD      de,BACT         ; Black queen attackers
1213:	0F7F  3A2200  	        LD      a,(P1)          ; Get queen
1214:	0F82  CB7F    	        BIT     7,a             ; Is she white ?
1215:	0F84  2801    	        JR      Z,rel008        ; Yes - skip
1216:	0F86  EB      	        EX      de,hl           ; Reverse for black
1217:	0F87  7E      	rel008: LD      a,(hl)          ; Number of defenders
1218:	0F88  EB      	        EX      de,hl           ; Reverse for attackers
1219:	0F89  96      	        SUB     (hl)            ; Defenders minus attackers
1220:	0F8A  3D      	        DEC     a               ; Less 1
1221:	0F8B  FDE1    	        POP     iy              ; Restore regs.
1222:	0F8D  D1      	        POP     de
1223:	0F8E  C1      	        POP     bc
1224:	0F8F  F2A30F  	        JP      P,PF25          ; Jump if pin not valid
1225:	0F92  211200  	PF20:   LD      hl,NPINS        ; Address of pinned piece count
1226:	0F95  34      	        INC     (hl)            ; Increment
1227:	0F96  DD2A1200	        LD      ix,(NPINS)      ; Load pin list index
1228:	0F9A  DD7143  	        LD      (ix+PLISTD),c   ; Save direction of pin
1229:	0F9D  3A0600  	        LD      a,(M4)          ; Position of pinned piece
1230:	0FA0  DD7739  	        LD      (ix+PLIST),a    ; Save in list
1231:	0FA3  FD23    	PF25:   INC     iy              ; Increment direction index
1232:	0FA5  1004    	        DJNZ    PF27            ; Done ? No - Jump
1233:	0FA7  13      	PF26:   INC     de              ; Incr King/Queen pos index
1234:	0FA8  C3EB0E  	        JP      PF1             ; Jump
1235:	0FAB  C30A0F  	PF27:   JP      PF2             ; Jump
1236:			
1237:			;***********************************************************
1238:			; EXCHANGE ROUTINE
1239:			;***********************************************************
1240:			; FUNCTION:   --  To determine the exchange value of a
1241:			;                 piece on a given square by examining all
1242:			;                 attackers and defenders of that piece.
1243:			;
1244:			; CALLED BY:  --  POINTS
1245:			;
1246:			; CALLS:      --  NEXTAD
1247:			;
1248:			; ARGUMENTS:  --  None.
1249:			;***********************************************************
1250:	0FAE  D9      	XCHNG:  EXX                     ; Swap regs.
1251:	0FAF  3A2200  	        LD      a,(P1)          ; Piece attacked
1252:	0FB2  212C01  	        LD      hl,WACT         ; Addr of white attkrs/dfndrs
1253:	0FB5  113301  	        LD      de,BACT         ; Addr of black attkrs/dfndrs
1254:	0FB8  CB7F    	        BIT     7,a             ; Is piece white ?
1255:	0FBA  2801    	        JR      Z,rel009        ; Yes - jump
1256:	0FBC  EB      	        EX      de,hl           ; Swap list pointers
1257:	0FBD  46      	rel009: LD      b,(hl)          ; Init list counts
1258:	0FBE  EB      	        EX      de,hl
1259:	0FBF  4E      	        LD      c,(hl)
1260:	0FC0  EB      	        EX      de,hl
1261:	0FC1  D9      	        EXX                     ; Restore regs.
1262:	0FC2  0E00    	        LD      c,0             ; Init attacker/defender flag
1263:	0FC4  1E00    	        LD      e,0             ; Init points lost count
1264:	0FC6  DD2A0C00	        LD      ix,(T3)         ; Load piece value index
1265:	0FCA  DD56A5  	        LD      d,(ix+PVALUE)   ; Get attacked piece value
1266:	0FCD  CB22    	        SLA     d               ; Double it
1267:	0FCF  42      	        LD      b,d             ; Save
1268:	0FD0  CDFC0F  	        CALL    NEXTAD          ; Retrieve first attacker
1269:	0FD3  C8      	        RET     Z               ; Return if none
1270:	0FD4  6F      	XC10:   LD      l,a             ; Save attacker value
1271:	0FD5  CDFC0F  	        CALL    NEXTAD          ; Get next defender
1272:	0FD8  2812    	        JR      Z,XC18          ; Jump if none
1273:	0FDA  08      	        EX      af,af'          ; Save defender value
1274:	0FDB  78      	        LD      a,b             ; Get attacked value
1275:	0FDC  BD      	        CP      l               ; Attacked less than attacker ?
1276:	0FDD  300F    	        JR      NC,XC19         ; No - jump
1277:	0FDF  08      	        EX      af,af'          ; -Restore defender
1278:	0FE0  BD      	XC15:   CP      l               ; Defender less than attacker ?
1279:	0FE1  D8      	        RET     C               ; Yes - return
1280:	0FE2  CDFC0F  	        CALL    NEXTAD          ; Retrieve next attacker value
1281:	0FE5  C8      	        RET     Z               ; Return if none
1282:	0FE6  6F      	        LD      l,a             ; Save attacker value
1283:	0FE7  CDFC0F  	        CALL    NEXTAD          ; Retrieve next defender value
1284:	0FEA  20F4    	        JR      NZ,XC15         ; Jump if none
1285:	0FEC  08      	XC18:   EX      af,af'          ; Save Defender
1286:	0FED  78      	        LD      a,b             ; Get value of attacked piece
1287:	0FEE  CB41    	XC19:   BIT     0,c             ; Attacker or defender ?
1288:	0FF0  2802    	        JR      Z,rel010        ; Jump if defender
1289:	0FF2  ED44    	        NEG                     ; Negate value for attacker
1290:	0FF4  83      	rel010: ADD     a,e             ; Total points lost
1291:	0FF5  5F      	        LD      e,a             ; Save total
1292:	0FF6  08      	        EX      af,af'          ; Restore previous defender
1293:	0FF7  C8      	        RET     Z               ; Return if none
1294:	0FF8  45      	        LD      b,l             ; Prev attckr becomes defender
1295:	0FF9  C3D40F  	        JP      XC10            ; Jump
1296:			
1297:			;***********************************************************
1298:			; NEXT ATTACKER/DEFENDER ROUTINE
1299:			;***********************************************************
1300:			; FUNCTION:   --  To retrieve the next attacker or defender
1301:			;                 piece value from the attack list, and delete
1302:			;                 that piece from the list.
1303:			;
1304:			; CALLED BY:  --  XCHNG
1305:			;
1306:			; CALLS:      --  None
1307:			;
1308:			; ARGUMENTS:  --  Attack list addresses.
1309:			;                 Side flag
1310:			;                 Attack list counts
1311:			;***********************************************************
1312:	0FFC  0C      	NEXTAD: INC     c               ; Increment side flag
1313:	0FFD  D9      	        EXX                     ; Swap registers
1314:	0FFE  78      	        LD      a,b             ; Swap list counts
1315:	0FFF  41      	        LD      b,c
1316:	1000  4F      	        LD      c,a
1317:	1001  EB      	        EX      de,hl           ; Swap list pointers
1318:	1002  AF      	        XOR     a
1319:	1003  B8      	        CP      b               ; At end of list ?
1320:	1004  2809    	        JR      Z,NX6           ; Yes - jump
1321:	1006  05      	        DEC     b               ; Decrement list count
1322:	1007  23      	back03: INC     hl              ; Increment list pointer
1323:	1008  BE      	        CP      (hl)            ; Check next item in list
1324:	1009  28FC    	        JR      Z,back03        ; Jump if empty
1325:	100B  ED67    	        RRD                     ; Get value from list
1326:	100D  87      	        ADD     a,a             ; Double it
1327:	100E  2B      	        DEC     hl              ; Decrement list pointer
1328:	100F  D9      	NX6:    EXX                     ; Restore regs.
1329:	1010  C9      	        RET                     ; Return
1330:			
1331:			;***********************************************************
1332:			; POINT EVALUATION ROUTINE
1333:			;***********************************************************
1334:			;FUNCTION:   --  To perform a static board evaluation and
1335:			;                derive a score for a given board position
1336:			;
1337:			; CALLED BY:  --  FNDMOV
1338:			;                 EVAL
1339:			;
1340:			; CALLS:      --  ATTACK
1341:			;                 XCHNG
1342:			;                 LIMIT
1343:			;
1344:			; ARGUMENTS:  --  None
1345:			;***********************************************************
1346:	1011  AF      	POINTS: XOR     a               ; Zero out variables
1347:	1012  323000  	        LD      (MTRL),a
1348:	1015  322C00  	        LD      (BRDC),a
1349:	1018  322D00  	        LD      (PTSL),a
1350:	101B  322E00  	        LD      (PTSW1),a
1351:	101E  322F00  	        LD      (PTSW2),a
1352:	1021  323300  	        LD      (PTSCK),a
1353:	1024  210800  	        LD      hl,T1           ; Set attacker flag
1354:	1027  3607    	        LD      (hl),7
1355:	1029  3E15    	        LD      a,21            ; Init to first square on board
1356:	102B  320400  	PT5:    LD      (M3),a          ; Save as board index
1357:	102E  DD2A0400	        LD      ix,(M3)         ; Load board index
1358:	1032  DD7EB4  	        LD      a,(ix+BOARD)    ; Get piece from board
1359:	1035  FEFF    	        CP      -1              ; Off board edge ?
1360:	1037  CAEB10  	        JP      Z,PT25          ; Yes - jump
1361:	103A  212200  	        LD      hl,P1           ; Save piece, if any
1362:	103D  77      	        LD      (hl),a
1363:	103E  E607    	        AND     7               ; Save piece type, if any
1364:	1040  320C00  	        LD      (T3),a
1365:	1043  FE02    	        CP      KNIGHT          ; Less than a Knight (Pawn) ?
1366:	1045  3839    	        JR      C,PT6X          ; Yes - Jump
1367:	1047  FE04    	        CP      ROOK            ; Rook, Queen or King ?
1368:	1049  3824    	        JR      C,PT6B          ; No - jump
1369:	104B  FE06    	        CP      KING            ; Is it a King ?
1370:	104D  280A    	        JR      Z,PT6AA         ; Yes - jump
1371:	104F  3A2600  	        LD      a,(MOVENO)      ; Get move number
1372:	1052  FE07    	        CP      7               ; Less than 7 ?
1373:	1054  3812    	        JR      C,PT6A          ; Yes - Jump
1374:	1056  C38010  	        JP      PT6X            ; Jump
1375:	1059  CB66    	PT6AA:  BIT     4,(hl)          ; Castled yet ?
1376:	105B  280B    	        JR      Z,PT6A          ; No - jump
1377:	105D  3E06    	        LD      a,+6            ; Bonus for castling
1378:	105F  CB7E    	        BIT     7,(hl)          ; Check piece color
1379:	1061  2818    	        JR      Z,PT6D          ; Jump if white
1380:	1063  3EFA    	        LD      a,-6            ; Bonus for black castling
1381:	1065  C37B10  	        JP      PT6D            ; Jump
1382:	1068  CB5E    	PT6A:   BIT     3,(hl)          ; Has piece moved yet ?
1383:	106A  2814    	        JR      Z,PT6X          ; No - jump
1384:	106C  C37310  	        JP      PT6C            ; Jump
1385:	106F  CB5E    	PT6B:   BIT     3,(hl)          ; Has piece moved yet ?
1386:	1071  200D    	        JR      NZ,PT6X         ; Yes - jump
1387:	1073  3EFE    	PT6C:   LD      a,-2            ; Two point penalty for white
1388:	1075  CB7E    	        BIT     7,(hl)          ; Check piece color
1389:	1077  2802    	        JR      Z,PT6D          ; Jump if white
1390:	1079  3E02    	        LD      a,+2            ; Two point penalty for black
1391:	107B  212C00  	PT6D:   LD      hl,BRDC         ; Get address of board control
1392:	107E  86      	        ADD     a,(hl)          ; Add on penalty/bonus points
1393:	107F  77      	        LD      (hl),a          ; Save
1394:	1080  AF      	PT6X:   XOR     a               ; Zero out attack list
1395:	1081  060E    	        LD      b,14
1396:	1083  212C01  	        LD      hl,ATKLST
1397:	1086  77      	back04: LD      (hl),a
1398:	1087  23      	        INC     hl
1399:	1088  10FC    	        DJNZ    back04
1400:	108A  CDB90D  	        CALL    ATTACK          ; Build attack list for square
1401:	108D  213301  	        LD      hl,BACT         ; Get black attacker count addr
1402:	1090  3A2C01  	        LD      a,(WACT)        ; Get white attacker count
1403:	1093  96      	        SUB     (hl)            ; Compute count difference
1404:	1094  212C00  	        LD      hl,BRDC         ; Address of board control
1405:	1097  86      	        ADD     a,(hl)          ; Accum board control score
1406:	1098  77      	        LD      (hl),a          ; Save
1407:	1099  3A2200  	        LD      a,(P1)          ; Get piece on current square
1408:	109C  A7      	        AND     a               ; Is it empty ?
1409:	109D  CAEB10  	        JP      Z,PT25          ; Yes - jump
1410:	10A0  CDAE0F  	        CALL    XCHNG           ; Evaluate exchange, if any
1411:	10A3  AF      	        XOR     a               ; Check for a loss
1412:	10A4  BB      	        CP      e               ; Points lost ?
1413:	10A5  2835    	        JR      Z,PT23          ; No - Jump
1414:	10A7  15      	        DEC     d               ; Deduct half a Pawn value
1415:	10A8  3A2200  	        LD      a,(P1)          ; Get piece under attack
1416:	10AB  212100  	        LD      hl,COLOR        ; Color of side just moved
1417:	10AE  AE      	        XOR     (hl)            ; Compare with piece
1418:	10AF  CB7F    	        BIT     7,a             ; Do colors match ?
1419:	10B1  7B      	        LD      a,e             ; Points lost
1420:	10B2  2019    	        JR      NZ,PT20         ; Jump if no match
1421:	10B4  212D00  	        LD      hl,PTSL         ; Previous max points lost
1422:	10B7  BE      	        CP      (hl)            ; Compare to current value
1423:	10B8  3822    	        JR      C,PT23          ; Jump if greater than
1424:	10BA  73      	        LD      (hl),e          ; Store new value as max lost
1425:	10BB  DD2A1600	        LD      ix,(MLPTRJ)     ; Load pointer to this move
1426:	10BF  3A0400  	        LD      a,(M3)          ; Get position of lost piece
1427:	10C2  DDBE03  	        CP      (ix+MLTOP)      ; Is it the one moving ?
1428:	10C5  2015    	        JR      NZ,PT23         ; No - jump
1429:	10C7  323300  	        LD      (PTSCK),a       ; Save position as a flag
1430:	10CA  C3DC10  	        JP      PT23            ; Jump
1431:	10CD  212E00  	PT20:   LD      hl,PTSW1        ; Previous maximum points won
1432:	10D0  BE      	        CP      (hl)            ; Compare to current value
1433:	10D1  3802    	        JR      C,rel011        ; Jump if greater than
1434:	10D3  7E      	        LD      a,(hl)          ; Load previous max value
1435:	10D4  73      	        LD      (hl),e          ; Store new value as max won
1436:	10D5  212F00  	rel011: LD      hl,PTSW2        ; Previous 2nd max points won
1437:	10D8  BE      	        CP      (hl)            ; Compare to current value
1438:	10D9  3801    	        JR      C,PT23          ; Jump if greater than
1439:	10DB  77      	        LD      (hl),a          ; Store as new 2nd max lost
1440:	10DC  212200  	PT23:   LD      hl,P1           ; Get piece
1441:	10DF  CB7E    	        BIT     7,(hl)          ; Test color
1442:	10E1  7A      	        LD      a,d             ; Value of piece
1443:	10E2  2802    	        JR      Z,rel012        ; Jump if white
1444:	10E4  ED44    	        NEG                     ; Negate for black
1445:	10E6  213000  	rel012: LD      hl,MTRL         ; Get addrs of material total
1446:	10E9  86      	        ADD     a,(hl)          ; Add new value
1447:	10EA  77      	        LD      (hl),a          ; Store
1448:	10EB  3A0400  	PT25:   LD      a,(M3)          ; Get current board position
1449:	10EE  3C      	        INC     a               ; Increment
1450:	10EF  FE63    	        CP      99              ; At end of board ?
1451:	10F1  C22B10  	        JP      NZ,PT5          ; No - jump
1452:	10F4  3A3300  	        LD      a,(PTSCK)       ; Moving piece lost flag
1453:	10F7  A7      	        AND     a               ; Was it lost ?
1454:	10F8  280A    	        JR      Z,PT25A         ; No - jump
1455:	10FA  3A2F00  	        LD      a,(PTSW2)       ; 2nd max points won
1456:	10FD  322E00  	        LD      (PTSW1),a       ; Store as max points won
1457:	1100  AF      	        XOR     a               ; Zero out 2nd max points won
1458:	1101  322F00  	        LD      (PTSW2),a
1459:	1104  3A2D00  	PT25A:  LD      a,(PTSL)        ; Get max points lost
1460:	1107  A7      	        AND     a               ; Is it zero ?
1461:	1108  2801    	        JR      Z,rel013        ; Yes - jump
1462:	110A  3D      	        DEC     a               ; Decrement it
1463:	110B  47      	rel013: LD      b,a             ; Save it
1464:	110C  3A2E00  	        LD      a,(PTSW1)       ; Max,points won
1465:	110F  A7      	        AND     a               ; Is it zero ?
1466:	1110  2809    	        JR      Z,rel014        ; Yes - jump
1467:	1112  3A2F00  	        LD      a,(PTSW2)       ; 2nd max points won
1468:	1115  A7      	        AND     a               ; Is it zero ?
1469:	1116  2803    	        JR      Z,rel014        ; Yes - jump
1470:	1118  3D      	        DEC     a               ; Decrement it
1471:	1119  CB3F    	        SRL     a               ; Divide it by 2
1472:	111B  90      	rel014: SUB     b               ; Subtract points lost
1473:	111C  212100  	        LD      hl,COLOR        ; Color of side just moved ???
1474:	111F  CB7E    	        BIT     7,(hl)          ; Is it white ?
1475:	1121  2802    	        JR      Z,rel015        ; Yes - jump
1476:	1123  ED44    	        NEG                     ; Negate for black
1477:	1125  213000  	rel015: LD      hl,MTRL         ; Net material on board
1478:	1128  86      	        ADD     a,(hl)          ; Add exchange adjustments
1479:	1129  213200  	        LD      hl,MV0          ; Material at ply 0
1480:	112C  96      	        SUB     (hl)            ; Subtract from current
1481:	112D  47      	        LD      b,a             ; Save
1482:	112E  3E1E    	        LD      a,30            ; Load material limit
1483:	1130  CD6411  	        CALL    LIMIT           ; Limit to plus or minus value
1484:	1133  5F      	        LD      e,a             ; Save limited value
1485:	1134  3A2C00  	        LD      a,(BRDC)        ; Get board control points
1486:	1137  213100  	        LD      hl,BC0          ; Board control at ply zero
1487:	113A  96      	        SUB     (hl)            ; Get difference
1488:	113B  47      	        LD      b,a             ; Save
1489:	113C  3A3300  	        LD      a,(PTSCK)       ; Moving piece lost flag
1490:	113F  A7      	        AND     a               ; Is it zero ?
1491:	1140  2802    	        JR      Z,rel026        ; Yes - jump
1492:	1142  0600    	        LD      b,0             ; Zero board control points
1493:	1144  3E06    	rel026: LD      a,6             ; Load board control limit
1494:	1146  CD6411  	        CALL    LIMIT           ; Limit to plus or minus value
1495:	1149  57      	        LD      d,a             ; Save limited value
1496:	114A  7B      	        LD      a,e             ; Get material points
1497:	114B  87      	        ADD     a,a             ; Multiply by 4
1498:	114C  87      	        ADD     a,a
1499:	114D  82      	        ADD     a,d             ; Add board control
1500:	114E  212100  	        LD      hl,COLOR        ; Color of side just moved
1501:	1151  CB7E    	        BIT     7,(hl)          ; Is it white ?
1502:	1153  2002    	        JR      NZ,rel016       ; No - jump
1503:	1155  ED44    	        NEG                     ; Negate for white
1504:	1157  C680    	rel016: ADD     a,80H           ; Rescale score (neutral = 80H)
1505:	1159  322B00  	        LD      (VALM),a        ; Save score
1506:	115C  DD2A1600	        LD      ix,(MLPTRJ)     ; Load move list pointer
1507:	1160  DD7705  	        LD      (ix+MLVAL),a    ; Save score in move list
1508:	1163  C9      	        RET                     ; Return
1509:			
1510:			;***********************************************************
1511:			; LIMIT ROUTINE
1512:			;***********************************************************
1513:			; FUNCTION:   --  To limit the magnitude of a given value
1514:			;                 to another given value.
1515:			;
1516:			; CALLED BY:  --  POINTS
1517:			;
1518:			; CALLS:      --  None
1519:			;
1520:			; ARGUMENTS:  --  Input  - Value, to be limited in the B
1521:			;                          register.
1522:			;                        - Value to limit to in the A register
1523:			;                 Output - Limited value in the A register.
1524:			;***********************************************************
1525:	1164  CB78    	LIMIT:  BIT     7,b             ; Is value negative ?
1526:	1166  CA6F11  	        JP      Z,LIM10         ; No - jump
1527:	1169  ED44    	        NEG                     ; Make positive
1528:	116B  B8      	        CP      b               ; Compare to limit
1529:	116C  D0      	        RET     NC              ; Return if outside limit
1530:	116D  78      	        LD      a,b             ; Output value as is
1531:	116E  C9      	        RET                     ; Return
1532:	116F  B8      	LIM10:  CP      b               ; Compare to limit
1533:	1170  D8      	        RET     C               ; Return if outside limit
1534:	1171  78      	        LD      a,b             ; Output value as is
1535:	1172  C9      	        RET                     ; Return
1536:			
1537:			;***********************************************************
1538:			; MOVE ROUTINE
1539:			;***********************************************************
1540:			; FUNCTION:   --  To execute a move from the move list on the
1541:			;                 board array.
1542:			;
1543:			; CALLED BY:  --  CPTRMV
1544:			;                 PLYRMV
1545:			;                 EVAL
1546:			;                 FNDMOV
1547:			;                 VALMOV
1548:			;
1549:			; CALLS:      --  None
1550:			;
1551:			; ARGUMENTS:  --  None
1552:			;***********************************************************
1553:	1173  2A1600  	MOVE:   LD      hl,(MLPTRJ)     ; Load move list pointer
1554:	1176  23      	        INC     hl              ; Increment past link bytes
1555:	1177  23      	        INC     hl
1556:	1178  7E      	MV1:    LD      a,(hl)          ; "From" position
1557:	1179  320000  	        LD      (M1),a          ; Save
1558:	117C  23      	        INC     hl              ; Increment pointer
1559:	117D  7E      	        LD      a,(hl)          ; "To" position
1560:	117E  320200  	        LD      (M2),a          ; Save
1561:	1181  23      	        INC     hl              ; Increment pointer
1562:	1182  56      	        LD      d,(hl)          ; Get captured piece/flags
1563:	1183  DD2A0000	        LD      ix,(M1)         ; Load "from" pos board index
1564:	1187  DD5EB4  	        LD      e,(ix+BOARD)    ; Get piece moved
1565:	118A  CB6A    	        BIT     5,d             ; Test Pawn promotion flag
1566:	118C  202D    	        JR      NZ,MV15         ; Jump if set
1567:	118E  7B      	        LD      a,e             ; Piece moved
1568:	118F  E607    	        AND     7               ; Clear flag bits
1569:	1191  FE05    	        CP      QUEEN           ; Is it a queen ?
1570:	1193  282B    	        JR      Z,MV20          ; Yes - jump
1571:	1195  FE06    	        CP      KING            ; Is it a king ?
1572:	1197  2836    	        JR      Z,MV30          ; Yes - jump
1573:	1199  FD2A0200	MV5:    LD      iy,(M2)         ; Load "to" pos board index
1574:	119D  CBDB    	        SET     3,e             ; Set piece moved flag
1575:	119F  FD73B4  	        LD      (iy+BOARD),e    ; Insert piece at new position
1576:	11A2  DD36B400	        LD      (ix+BOARD),0    ; Empty previous position
1577:	11A6  CB72    	        BIT     6,d             ; Double move ?
1578:	11A8  2031    	        JR      NZ,MV40         ; Yes - jump
1579:	11AA  7A      	        LD      a,d             ; Get captured piece, if any
1580:	11AB  E607    	        AND     7
1581:	11AD  FE05    	        CP      QUEEN           ; Was it a queen ?
1582:	11AF  C0      	        RET     NZ              ; No - return
1583:	11B0  215001  	        LD      hl,POSQ         ; Addr of saved Queen position
1584:	11B3  CB7A    	        BIT     7,d             ; Is Queen white ?
1585:	11B5  2801    	        JR      Z,MV10          ; Yes - jump
1586:	11B7  23      	        INC     hl              ; Increment to black Queen pos
1587:	11B8  AF      	MV10:   XOR     a               ; Set saved position to zero
1588:	11B9  77      	        LD      (hl),a
1589:	11BA  C9      	        RET                     ; Return
1590:	11BB  CBD3    	MV15:   SET     2,e             ; Change Pawn to a Queen
1591:	11BD  C39911  	        JP      MV5             ; Jump
1592:	11C0  215001  	MV20:   LD      hl,POSQ         ; Addr of saved Queen position
1593:	11C3  CB7B    	MV21:   BIT     7,e             ; Is Queen white ?
1594:	11C5  2801    	        JR      Z,MV22          ; Yes - jump
1595:	11C7  23      	        INC     hl              ; Increment to black Queen pos
1596:	11C8  3A0200  	MV22:   LD      a,(M2)          ; Get new Queen position
1597:	11CB  77      	        LD      (hl),a          ; Save
1598:	11CC  C39911  	        JP      MV5             ; Jump
1599:	11CF  214E01  	MV30:   LD      hl,POSK         ; Get saved King position
1600:	11D2  CB72    	        BIT     6,d             ; Castling ?
1601:	11D4  28ED    	        JR      Z,MV21          ; No - jump
1602:	11D6  CBE3    	        SET     4,e             ; Set King castled flag
1603:	11D8  C3C311  	        JP      MV21            ; Jump
1604:	11DB  2A1600  	MV40:   LD      hl,(MLPTRJ)     ; Get move list pointer
1605:	11DE  110800  	        LD      de,8            ; Increment to next move
1606:	11E1  19      	        ADD     hl,de
1607:	11E2  C37811  	        JP      MV1             ; Jump (2nd part of dbl move)
1608:			
1609:			;***********************************************************
1610:			; UN-MOVE ROUTINE
1611:			;***********************************************************
1612:			; FUNCTION:   --  To reverse the process of the move routine,
1613:			;                 thereby restoring the board array to its
1614:			;                 previous position.
1615:			;
1616:			; CALLED BY:  --  VALMOV
1617:			;                 EVAL
1618:			;                 FNDMOV
1619:			;                 ASCEND
1620:			;
1621:			; CALLS:      --  None
1622:			;
1623:			; ARGUMENTS:  --  None
1624:			;***********************************************************
1625:	11E5  2A1600  	UNMOVE: LD      hl,(MLPTRJ)     ; Load move list pointer
1626:	11E8  23      	        INC     hl              ; Increment past link bytes
1627:	11E9  23      	        INC     hl
1628:	11EA  7E      	UM1:    LD      a,(hl)          ; Get "from" position
1629:	11EB  320000  	        LD      (M1),a          ; Save
1630:	11EE  23      	        INC     hl              ; Increment pointer
1631:	11EF  7E      	        LD      a,(hl)          ; Get "to" position
1632:	11F0  320200  	        LD      (M2),a          ; Save
1633:	11F3  23      	        INC     hl              ; Increment pointer
1634:	11F4  56      	        LD      d,(hl)          ; Get captured piece/flags
1635:	11F5  DD2A0200	        LD      ix,(M2)         ; Load "to" pos board index
1636:	11F9  DD5EB4  	        LD      e,(ix+BOARD)    ; Get piece moved
1637:	11FC  CB6A    	        BIT     5,d             ; Was it a Pawn promotion ?
1638:	11FE  2033    	        JR      NZ,UM15         ; Yes - jump
1639:	1200  7B      	        LD      a,e             ; Get piece moved
1640:	1201  E607    	        AND     7               ; Clear flag bits
1641:	1203  FE05    	        CP      QUEEN           ; Was it a Queen ?
1642:	1205  2836    	        JR      Z,UM20          ; Yes - jump
1643:	1207  FE06    	        CP      KING            ; Was it a King ?
1644:	1209  2841    	        JR      Z,UM30          ; Yes - jump
1645:	120B  CB62    	UM5:    BIT     4,d             ; Is this 1st move for piece ?
1646:	120D  2029    	        JR      NZ,UM16         ; Yes - jump
1647:	120F  FD2A0000	UM6:    LD      iy,(M1)         ; Load "from" pos board index
1648:	1213  FD73B4  	        LD      (iy+BOARD),e    ; Return to previous board pos
1649:	1216  7A      	        LD      a,d             ; Get captured piece, if any
1650:	1217  E68F    	        AND     8FH             ; Clear flags
1651:	1219  DD77B4  	        LD      (ix+BOARD),a    ; Return to board
1652:	121C  CB72    	        BIT     6,d             ; Was it a double move ?
1653:	121E  2038    	        JR      NZ,UM40         ; Yes - jump
1654:	1220  7A      	        LD      a,d             ; Get captured piece, if any
1655:	1221  E607    	        AND     7               ; Clear flag bits
1656:	1223  FE05    	        CP      QUEEN           ; Was it a Queen ?
1657:	1225  C0      	        RET     NZ              ; No - return
1658:	1226  215001  	        LD      hl,POSQ         ; Address of saved Queen pos
1659:	1229  CB7A    	        BIT     7,d             ; Is Queen white ?
1660:	122B  2801    	        JR      Z,UM10          ; Yes - jump
1661:	122D  23      	        INC     hl              ; Increment to black Queen pos
1662:	122E  3A0200  	UM10:   LD      a,(M2)          ; Queen's previous position
1663:	1231  77      	        LD      (hl),a          ; Save
1664:	1232  C9      	        RET                     ; Return
1665:	1233  CB93    	UM15:   RES     2,e             ; Restore Queen to Pawn
1666:	1235  C30B12  	        JP      UM5             ; Jump
1667:	1238  CB9B    	UM16:   RES     3,e             ; Clear piece moved flag
1668:	123A  C30F12  	        JP      UM6             ; Jump
1669:	123D  215001  	UM20:   LD      hl,POSQ         ; Addr of saved Queen position
1670:	1240  CB7B    	UM21:   BIT     7,e             ; Is Queen white ?
1671:	1242  2801    	        JR      Z,UM22          ; Yes - jump
1672:	1244  23      	        INC     hl              ; Increment to black Queen pos
1673:	1245  3A0000  	UM22:   LD      a,(M1)          ; Get previous position
1674:	1248  77      	        LD      (hl),a          ; Save
1675:	1249  C30B12  	        JP      UM5             ; Jump
1676:	124C  214E01  	UM30:   LD      hl,POSK         ; Address of saved King pos
1677:	124F  CB72    	        BIT     6,d             ; Was it a castle ?
1678:	1251  28ED    	        JR      Z,UM21          ; No - jump
1679:	1253  CBA3    	        RES     4,e             ; Clear castled flag
1680:	1255  C34012  	        JP      UM21            ; Jump
1681:	1258  2A1600  	UM40:   LD      hl,(MLPTRJ)     ; Load move list pointer
1682:	125B  110800  	        LD      de,8            ; Increment to next move
1683:	125E  19      	        ADD     hl,de
1684:	125F  C3EA11  	        JP      UM1             ; Jump (2nd part of dbl move)
1685:			
1686:			;***********************************************************
1687:			; SORT ROUTINE
1688:			;***********************************************************
1689:			; FUNCTION:   --  To sort the move list in order of
1690:			;                 increasing move value scores.
1691:			;
1692:			; CALLED BY:  --  FNDMOV
1693:			;
1694:			; CALLS:      --  EVAL
1695:			;
1696:			; ARGUMENTS:  --  None
1697:			;***********************************************************
1698:	1262  ED4B1400	SORTM:  LD      bc,(MLPTRI)     ; Move list begin pointer
1699:	1266  110000  	        LD      de,0            ; Initialize working pointers
1700:	1269  60      	SR5:    LD      h,b
1701:	126A  69      	        LD      l,c
1702:	126B  4E      	        LD      c,(hl)          ; Link to next move
1703:	126C  23      	        INC     hl
1704:	126D  46      	        LD      b,(hl)
1705:	126E  72      	        LD      (hl),d          ; Store to link in list
1706:	126F  2B      	        DEC     hl
1707:	1270  73      	        LD      (hl),e
1708:	1271  AF      	        XOR     a               ; End of list ?
1709:	1272  B8      	        CP      b
1710:	1273  C8      	        RET     Z               ; Yes - return
1711:	1274  ED431600	SR10:   LD      (MLPTRJ),bc     ; Save list pointer
1712:	1278  CD9E12  	        CALL    EVAL            ; Evaluate move
1713:	127B  2A1400  	        LD      hl,(MLPTRI)     ; Begining of move list
1714:	127E  ED4B1600	        LD      bc,(MLPTRJ)     ; Restore list pointer
1715:	1282  5E      	SR15:   LD      e,(hl)          ; Next move for compare
1716:	1283  23      	        INC     hl
1717:	1284  56      	        LD      d,(hl)
1718:	1285  AF      	        XOR     a               ; At end of list ?
1719:	1286  BA      	        CP      d
1720:	1287  280B    	        JR      Z,SR25          ; Yes - jump
1721:	1289  D5      	        PUSH    de              ; Transfer move pointer
1722:	128A  DDE1    	        POP     ix
1723:	128C  3A2B00  	        LD      a,(VALM)        ; Get new move value
1724:	128F  DDBE05  	        CP      (ix+MLVAL)      ; Less than list value ?
1725:	1292  3006    	        JR      NC,SR30         ; No - jump
1726:	1294  70      	SR25:   LD      (hl),b          ; Link new move into list
1727:	1295  2B      	        DEC     hl
1728:	1296  71      	        LD      (hl),c
1729:	1297  C36912  	        JP      SR5             ; Jump
1730:	129A  EB      	SR30:   EX      de,hl           ; Swap pointers
1731:	129B  C38212  	        JP      SR15            ; Jump
1732:			
1733:			;***********************************************************
1734:			; EVALUATION ROUTINE
1735:			;***********************************************************
1736:			; FUNCTION:   --  To evaluate a given move in the move list.
1737:			;                 It first makes the move on the board, then if
1738:			;                 the move is legal, it evaluates it, and then
1739:			;                 restores the board position.
1740:			;
1741:			; CALLED BY:  --  SORT
1742:			;
1743:			; CALLS:      --  MOVE
1744:			;                 INCHK
1745:			;                 PINFND
1746:			;                 POINTS
1747:			;                 UNMOVE
1748:			;
1749:			; ARGUMENTS:  --  None
1750:			;***********************************************************
1751:	129E  CD7311  	EVAL:   CALL    MOVE            ; Make move on the board array
1752:	12A1  CD980D  	        CALL    INCHK           ; Determine if move is legal
1753:	12A4  A7      	        AND     a               ; Legal move ?
1754:	12A5  2807    	        JR      Z,EV5           ; Yes - jump
1755:	12A7  AF      	        XOR     a               ; Score of zero
1756:	12A8  322B00  	        LD      (VALM),a        ; For illegal move
1757:	12AB  C3B412  	        JP      EV10            ; Jump
1758:	12AE  CDE40E  	EV5:    CALL    PINFND          ; Compile pinned list
1759:	12B1  CD1110  	        CALL    POINTS          ; Assign points to move
1760:	12B4  CDE511  	EV10:   CALL    UNMOVE          ; Restore board array
1761:	12B7  C9      	        RET                     ; Return
1762:			
1763:			;***********************************************************
1764:			; FIND MOVE ROUTINE
1765:			;***********************************************************
1766:			; FUNCTION:   --  To determine the computer's best move by
1767:			;                 performing a depth first tree search using
1768:			;                 the techniques of alpha-beta pruning.
1769:			;
1770:			; CALLED BY:  --  CPTRMV
1771:			;
1772:			; CALLS:      --  PINFND
1773:			;                 POINTS
1774:			;                 GENMOV
1775:			;                 SORTM
1776:			;                 ASCEND
1777:			;                 UNMOVE
1778:			;
1779:			; ARGUMENTS:  --  None
1780:			;***********************************************************
1781:	12B8  3A2600  	FNDMOV: LD      a,(MOVENO)      ; Current move number
1782:	12BB  FE01    	        CP      1               ; First move ?
1783:	12BD  CC3E14  	        CALL    Z,BOOK          ; Yes - execute book opening
1784:	12C0  AF      	        XOR     a               ; Initialize ply number to zero
1785:	12C1  322800  	        LD      (NPLY),a
1786:	12C4  210000  	        LD      hl,0            ; Initialize best move to zero
1787:	12C7  221A00  	        LD      (BESTM),hl
1788:	12CA  210003  	        LD      hl,MLIST        ; Initialize ply list pointers
1789:	12CD  221E00  	        LD      (MLNXT),hl
1790:	12D0  215D01  	        LD      hl,PLYIX-2
1791:	12D3  221400  	        LD      (MLPTRI),hl
1792:	12D6  3A2000  	        LD      a,(KOLOR)       ; Initialize color
1793:	12D9  322100  	        LD      (COLOR),a
1794:	12DC  215301  	        LD      hl,SCORE        ; Initialize score index
1795:	12DF  221800  	        LD      (SCRIX),hl
1796:	12E2  3A2700  	        LD      a,(PLYMAX)      ; Get max ply number
1797:	12E5  C602    	        ADD     a,2             ; Add 2
1798:	12E7  47      	        LD      b,a             ; Save as counter
1799:	12E8  AF      	        XOR     a               ; Zero out score table
1800:	12E9  77      	back05: LD      (hl),a
1801:	12EA  23      	        INC     hl
1802:	12EB  10FC    	        DJNZ    back05
1803:	12ED  323100  	        LD      (BC0),a         ; Zero ply 0 board control
1804:	12F0  323200  	        LD      (MV0),a         ; Zero ply 0 material
1805:	12F3  CDE40E  	        CALL    PINFND          ; Compile pin list
1806:	12F6  CD1110  	        CALL    POINTS          ; Evaluate board at ply 0
1807:	12F9  3A2C00  	        LD      a,(BRDC)        ; Get board control points
1808:	12FC  323100  	        LD      (BC0),a         ; Save
1809:	12FF  3A3000  	        LD      a,(MTRL)        ; Get material count
1810:	1302  323200  	        LD      (MV0),a         ; Save
1811:	1305  212800  	FM5:    LD      hl,NPLY         ; Address of ply counter
1812:	1308  34      	        INC     (hl)            ; Increment ply count
1813:	1309  AF      	        XOR     a               ; Initialize mate flag
1814:	130A  322A00  	        LD      (MATEF),a
1815:	130D  CD560D  	        CALL    GENMOV          ; Generate list of moves
1816:	1310  3A2800  	        LD      a,(NPLY)        ; Current ply counter
1817:	1313  212700  	        LD      hl,PLYMAX       ; Address of maximum ply number
1818:	1316  BE      	        CP      (hl)            ; At max ply ?
1819:	1317  DC6212  	        CALL    C,SORTM         ; No - call sort
1820:	131A  2A1400  	        LD      hl,(MLPTRI)     ; Load ply index pointer
1821:	131D  221600  	        LD      (MLPTRJ),hl     ; Save as last move pointer
1822:	1320  2A1600  	FM15:   LD      hl,(MLPTRJ)     ; Load last move pointer
1823:	1323  5E      	        LD      e,(hl)          ; Get next move pointer
1824:	1324  23      	        INC     hl
1825:	1325  56      	        LD      d,(hl)
1826:	1326  7A      	        LD      a,d
1827:	1327  A7      	        AND     a               ; End of move list ?
1828:	1328  2863    	        JR      Z,FM25          ; Yes - jump
1829:	132A  ED531600	        LD      (MLPTRJ),de     ; Save current move pointer
1830:	132E  2A1400  	        LD      hl,(MLPTRI)     ; Save in ply pointer list
1831:	1331  73      	        LD      (hl),e
1832:	1332  23      	        INC     hl
1833:	1333  72      	        LD      (hl),d
1834:	1334  3A2800  	        LD      a,(NPLY)        ; Current ply counter
1835:	1337  212700  	        LD      hl,PLYMAX       ; Maximum ply number ?
1836:	133A  BE      	        CP      (hl)            ; Compare
1837:	133B  3826    	        JR      C,FM18          ; Jump if not max
1838:	133D  CD7311  	        CALL    MOVE            ; Execute move on board array
1839:	1340  CD980D  	        CALL    INCHK           ; Check for legal move
1840:	1343  A7      	        AND     a               ; Is move legal
1841:	1344  2806    	        JR      Z,rel017        ; Yes - jump
1842:	1346  CDE511  	        CALL    UNMOVE          ; Restore board position
1843:	1349  C32013  	        JP      FM15            ; Jump
1844:	134C  3A2800  	rel017: LD      a,(NPLY)        ; Get ply counter
1845:	134F  212700  	        LD      hl,PLYMAX       ; Max ply number
1846:	1352  BE      	        CP      (hl)            ; Beyond max ply ?
1847:	1353  2065    	        JR      NZ,FM35         ; Yes - jump
1848:	1355  3A2100  	        LD      a,(COLOR)       ; Get current color
1849:	1358  EE80    	        XOR     80H             ; Get opposite color
1850:	135A  CD9B0D  	        CALL    INCHK1          ; Determine if King is in check
1851:	135D  A7      	        AND     a               ; In check ?
1852:	135E  285A    	        JR      Z,FM35          ; No - jump
1853:	1360  C37013  	        JP      FM19            ; Jump (One more ply for check)
1854:	1363  DD2A1600	FM18:   LD      ix,(MLPTRJ)     ; Load move pointer
1855:	1367  DD7E05  	        LD      a,(ix+MLVAL)    ; Get move score
1856:	136A  A7      	        AND     a               ; Is it zero (illegal move) ?
1857:	136B  28B3    	        JR      Z,FM15          ; Yes - jump
1858:	136D  CD7311  	        CALL    MOVE            ; Execute move on board array
1859:	1370  212100  	FM19:   LD      hl,COLOR        ; Toggle color
1860:	1373  3E80    	        LD      a,80H
1861:	1375  AE      	        XOR     (hl)
1862:	1376  77      	        LD      (hl),a          ; Save new color
1863:	1377  CB7F    	        BIT     7,a             ; Is it white ?
1864:	1379  2004    	        JR      NZ,rel018       ; No - jump
1865:	137B  212600  	        LD      hl,MOVENO       ; Increment move number
1866:	137E  34      	        INC     (hl)
1867:	137F  2A1800  	rel018: LD      hl,(SCRIX)      ; Load score table pointer
1868:	1382  7E      	        LD      a,(hl)          ; Get score two plys above
1869:	1383  23      	        INC     hl              ; Increment to current ply
1870:	1384  23      	        INC     hl
1871:	1385  77      	        LD      (hl),a          ; Save score as initial value
1872:	1386  2B      	        DEC     hl              ; Decrement pointer
1873:	1387  221800  	        LD      (SCRIX),hl      ; Save it
1874:	138A  C30513  	        JP      FM5             ; Jump
1875:	138D  3A2A00  	FM25:   LD      a,(MATEF)       ; Get mate flag
1876:	1390  A7      	        AND     a               ; Checkmate or stalemate ?
1877:	1391  2013    	        JR      NZ,FM30         ; No - jump
1878:	1393  3A2900  	        LD      a,(CKFLG)       ; Get check flag
1879:	1396  A7      	        AND     a               ; Was King in check ?
1880:	1397  3E80    	        LD      a,80H           ; Pre-set stalemate score
1881:	1399  282B    	        JR      Z,FM36          ; No - jump (stalemate)
1882:	139B  3A2600  	        LD      a,(MOVENO)      ; Get move number
1883:	139E  322500  	        LD      (PMATE),a       ; Save
1884:	13A1  3EFF    	        LD      a,0FFH          ; Pre-set checkmate score
1885:	13A3  C3C613  	        JP      FM36            ; Jump
1886:	13A6  3A2800  	FM30:   LD      a,(NPLY)        ; Get ply counter
1887:	13A9  FE01    	        CP      1               ; At top of tree ?
1888:	13AB  C8      	        RET     Z               ; Yes - return
1889:	13AC  CD0A14  	        CALL    ASCEND          ; Ascend one ply in tree
1890:	13AF  2A1800  	        LD      hl,(SCRIX)      ; Load score table pointer
1891:	13B2  23      	        INC     hl              ; Increment to current ply
1892:	13B3  23      	        INC     hl
1893:	13B4  7E      	        LD      a,(hl)          ; Get score
1894:	13B5  2B      	        DEC     hl              ; Restore pointer
1895:	13B6  2B      	        DEC     hl
1896:	13B7  C3CE13  	        JP      FM37            ; Jump
1897:	13BA  CDE40E  	FM35:   CALL    PINFND          ; Compile pin list
1898:	13BD  CD1110  	        CALL    POINTS          ; Evaluate move
1899:	13C0  CDE511  	        CALL    UNMOVE          ; Restore board position
1900:	13C3  3A2B00  	        LD      a,(VALM)        ; Get value of move
1901:	13C6  212A00  	FM36:   LD      hl,MATEF        ; Set mate flag
1902:	13C9  CBC6    	        SET     0,(hl)
1903:	13CB  2A1800  	        LD      hl,(SCRIX)      ; Load score table pointer
1904:	13CE          	FM37:
1905:	13CE  BE      	        CP      (hl)            ; Compare to score 2 ply above
1906:	13CF  3833    	        JR      C,FM40          ; Jump if less
1907:	13D1  2831    	        JR      Z,FM40          ; Jump if equal
1908:	13D3  ED44    	        NEG                     ; Negate score
1909:	13D5  23      	        INC     hl              ; Incr score table pointer
1910:	13D6  BE      	        CP      (hl)            ; Compare to score 1 ply above
1911:	13D7  DA2013  	        JP      C,FM15          ; Jump if less than
1912:	13DA  CA2013  	        JP      Z,FM15          ; Jump if equal
1913:	13DD  77      	        LD      (hl),a          ; Save as new score 1 ply above
1914:	13DE  3A2800  	        LD      a,(NPLY)        ; Get current ply counter
1915:	13E1  FE01    	        CP      1               ; At top of tree ?
1916:	13E3  C22013  	        JP      NZ,FM15         ; No - jump
1917:	13E6  2A1600  	        LD      hl,(MLPTRJ)     ; Load current move pointer
1918:	13E9  221A00  	        LD      (BESTM),hl      ; Save as best move pointer
1919:	13EC  3A5401  	        LD      a,(SCORE+1)     ; Get best move score
1920:	13EF  FEFF    	        CP      0FFH            ; Was it a checkmate ?
1921:	13F1  C22013  	        JP      NZ,FM15         ; No - jump
1922:	13F4  212700  	        LD      hl,PLYMAX       ; Get maximum ply number
1923:	13F7  35      	        DEC     (hl)            ; Subtract 2
1924:	13F8  35      	        DEC     (hl)
1925:	13F9  3A2000  	        LD      a,(KOLOR)       ; Get computer's color
1926:	13FC  CB7F    	        BIT     7,a             ; Is it white ?
1927:	13FE  C8      	        RET     Z               ; Yes - return
1928:	13FF  212500  	        LD      hl,PMATE        ; Checkmate move number
1929:	1402  35      	        DEC     (hl)            ; Decrement
1930:	1403  C9      	        RET                     ; Return
1931:	1404  CD0A14  	FM40:   CALL    ASCEND          ; Ascend one ply in tree
1932:	1407  C32013  	        JP      FM15            ; Jump
1933:			
1934:			;***********************************************************
1935:			; ASCEND TREE ROUTINE
1936:			;***********************************************************
1937:			; FUNCTION:  --  To adjust all necessary parameters to
1938:			;                ascend one ply in the tree.
1939:			;
1940:			; CALLED BY: --  FNDMOV
1941:			;
1942:			; CALLS:     --  UNMOVE
1943:			;
1944:			; ARGUMENTS: --  None
1945:			;***********************************************************
1946:	140A  212100  	ASCEND: LD      hl,COLOR        ; Toggle color
1947:	140D  3E80    	        LD      a,80H
1948:	140F  AE      	        XOR     (hl)
1949:	1410  77      	        LD      (hl),a          ; Save new color
1950:	1411  CB7F    	        BIT     7,a             ; Is it white ?
1951:	1413  2804    	        JR      Z,rel019        ; Yes - jump
1952:	1415  212600  	        LD      hl,MOVENO       ; Decrement move number
1953:	1418  35      	        DEC     (hl)
1954:	1419  2A1800  	rel019: LD      hl,(SCRIX)      ; Load score table index
1955:	141C  2B      	        DEC     hl              ; Decrement
1956:	141D  221800  	        LD      (SCRIX),hl      ; Save
1957:	1420  212800  	        LD      hl,NPLY         ; Decrement ply counter
1958:	1423  35      	        DEC     (hl)
1959:	1424  2A1400  	        LD      hl,(MLPTRI)     ; Load ply list pointer
1960:	1427  2B      	        DEC     hl              ; Load pointer to move list top
1961:	1428  56      	        LD      d,(hl)
1962:	1429  2B      	        DEC     hl
1963:	142A  5E      	        LD      e,(hl)
1964:	142B  ED531E00	        LD      (MLNXT),de      ; Update move list avail ptr
1965:	142F  2B      	        DEC     hl              ; Get ptr to next move to undo
1966:	1430  56      	        LD      d,(hl)
1967:	1431  2B      	        DEC     hl
1968:	1432  5E      	        LD      e,(hl)
1969:	1433  221400  	        LD      (MLPTRI),hl     ; Save new ply list pointer
1970:	1436  ED531600	        LD      (MLPTRJ),de     ; Save next move pointer
1971:	143A  CDE511  	        CALL    UNMOVE          ; Restore board to previous ply
1972:	143D  C9      	        RET                     ; Return
1973:			
1974:			;***********************************************************
1975:			; ONE MOVE BOOK OPENING
1976:			; **********************************************************
1977:			; FUNCTION:   --  To provide an opening book of a single
1978:			;                 move.
1979:			;
1980:			; CALLED BY:  --  FNDMOV
1981:			;
1982:			; CALLS:      --  None
1983:			;
1984:			; ARGUMENTS:  --  None
1985:			;***********************************************************
1986:	143E  F1      	BOOK:   POP     af              ; Abort return to FNDMOV
1987:	143F  215401  	        LD      hl,SCORE+1      ; Zero out score
1988:	1442  3600    	        LD      (hl),0          ; Zero out score table
1989:	1444  213200  	        LD      hl,BMOVES-2     ; Init best move ptr to book
1990:	1447  221A00  	        LD      (BESTM),hl
1991:	144A  211A00  	        LD      hl,BESTM        ; Initialize address of pointer
1992:	144D  3A2000  	        LD      a,(KOLOR)       ; Get computer's color
1993:	1450  A7      	        AND     a               ; Is it white ?
1994:	1451  2009    	        JR      NZ,BM5          ; No - jump
1995:	1453  ED5F    	        LD      a,r             ; Load refresh reg (random no)
1996:	1455  CB47    	        BIT     0,a             ; Test random bit
1997:	1457  C8      	        RET     Z               ; Return if zero (P-K4)
1998:	1458  34      	        INC     (hl)            ; P-Q4
1999:	1459  34      	        INC     (hl)
2000:	145A  34      	        INC     (hl)
2001:	145B  C9      	        RET                     ; Return
2002:	145C  34      	BM5:    INC     (hl)            ; Increment to black moves
2003:	145D  34      	        INC     (hl)
2004:	145E  34      	        INC     (hl)
2005:	145F  34      	        INC     (hl)
2006:	1460  34      	        INC     (hl)
2007:	1461  34      	        INC     (hl)
2008:	1462  DD2A1600	        LD      ix,(MLPTRJ)     ; Pointer to opponents 1st move
2009:	1466  DD7E02  	        LD      a,(ix+MLFRP)    ; Get "from" position
2010:	1469  FE16    	        CP      22              ; Is it a Queen Knight move ?
2011:	146B  280C    	        JR      Z,BM9           ; Yes - Jump
2012:	146D  FE1B    	        CP      27              ; Is it a King Knight move ?
2013:	146F  2808    	        JR      Z,BM9           ; Yes - jump
2014:	1471  FE22    	        CP      34              ; Is it a Queen Pawn ?
2015:	1473  2804    	        JR      Z,BM9           ; Yes - jump
2016:	1475  D8      	        RET     C               ; If Queen side Pawn opening -
2017:			                                ; return (P-K4)
2018:	1476  FE23    	        CP      35              ; Is it a King Pawn ?
2019:	1478  C8      	        RET     Z               ; Yes - return (P-K4)
2020:	1479  34      	BM9:    INC     (hl)            ; (P-Q4)
2021:	147A  34      	        INC     (hl)
2022:	147B  34      	        INC     (hl)
2023:	147C  C9      	        RET                     ; Return to CPTRMV
2024:			
2025:			;*******************************************************
2026:			; GRAPHICS DATA BASE
2027:			;*******************************************************
2028:			; DESCRIPTION:  The Graphics Data Base contains the
2029:			;               necessary stored data to produce the piece
2030:			;               on the board. Only the center 4 x 4 blocks are
2031:			;               stored and only for a Black Piece on a White
2032:			;               square. A White piece on a black square is
2033:			;               produced by complementing each block, and a
2034:			;               piece on its own color square is produced
2035:			;               by moving in a kernel of 6 blocks.
2036:			;*******************************************************
2037:	0180          	        ORG     START+384
2038:	0200          	BLBASE  EQU     START+512
2039:	FF80          	BLOCK   EQU     $-BLBASE
2040:	0180  80808080	        DB      $80,$80,$80,$80 ; Black Pawn on White square
2041:	0184  80A09080	        DB      $80,$A0,$90,$80
2042:	0188  80AF9F80	        DB      $80,$AF,$9F,$80
2043:	018C  80838380	        DB      $80,$83,$83,$80
2044:	0190  80B0B080	        DB      $80,$B0,$B0,$80 ; Black Knight on White square
2045:	0194  BEBFBF95	        DB      $BE,$BF,$BF,$95
2046:	0198  A0BEBF85	        DB      $A0,$BE,$BF,$85
2047:	019C  83838381	        DB      $83,$83,$83,$81
2048:	01A0  80A00080	        DB      $80,$A0,$00,$80 ; Black Bishop on White square
2049:	01A4  A8BFBD80	        DB      $A8,$BF,$BD,$80
2050:	01A8  82AF8780	        DB      $82,$AF,$87,$80
2051:	01AC  82838380	        DB      $82,$83,$83,$80
2052:	01B0  80808080	        DB      $80,$80,$80,$80 ; Black Rook on White square
2053:	01B4  8ABEBD85	        DB      $8A,$BE,$BD,$85
2054:	01B8  80BFBF80	        DB      $80,$BF,$BF,$80
2055:	01BC  82838381	        DB      $82,$83,$83,$81
2056:	01C0  90808090	        DB      $90,$80,$80,$90 ; Black Queen on White square
2057:	01C4  BFB4BE95	        DB      $BF,$B4,$BE,$95
2058:	01C8  8BBF9F81	        DB      $8B,$BF,$9F,$81
2059:	01CC  83838381	        DB      $83,$83,$83,$81
2060:	01D0  80B89080	        DB      $80,$B8,$90,$80 ; Black King on White square
2061:	01D4  BCBAB894	        DB      $BC,$BA,$B8,$94
2062:	01D8  AFBFBF85	        DB      $AF,$BF,$BF,$85
2063:	01DC  83838381	        DB      $83,$83,$83,$81
2064:	01E0  90B0B080	        DB      $90,$B0,$B0,$80 ; Toppled Black King
2065:	01E4  BFBFB780	        DB      $BF,$BF,$B7,$80
2066:	01E8  9FBFBD80	        DB      $9F,$BF,$BD,$80
2067:	01EC  8080889D	        DB      $80,$80,$88,$9D
2068:	FFF0          	KERNEL  EQU     $-BLBASE
2069:	01F0  BF9FAFBF	        DB      $BF,$9F,$AF,$BF,$9A,$A5 ; Pawn Kernel
	      9AA5
2070:	01F6  89AFBF9F	        DB      $89,$AF,$BF,$9F,$B9,$9F ; Knight Kernel
	      B99F
2071:	01FC  97BE96BD	        DB      $97,$BE,$96,$BD,$9B,$B9 ; Bishop Kernel
	      9BB9
2072:	0202  B5A192BF	        DB      $B5,$A1,$92,$BF,$AA,$95 ; Rook Kernel
	      AA95
2073:	0208  A89BB9B6	        DB      $A8,$9B,$B9,$B6,$AF,$A7 ; Queen Kernel
	      AFA7
2074:	020E  A385A79A	        DB      $A3,$85,$A7,$9A,$BF,$9F ; King Kernel
	      BF9F
2075:	0214  A8BF89A2	        DB      $A8,$BF,$89,$A2,$8F,$86 ; Toppled King Kernel
	      8F86
2076:			
2077:			;*******************************************************
2078:			; STANDARD MESSAGES
2079:			;*******************************************************
2080:	1800          	        ORG     START+1800H
2081:	1800  57454C43	GRTTNG  DB      "WELCOME TO CHESS! CARE FOR A GAME?"
	      4F4D4520
	      544F2043
	      48455353
	      21204341
	      52452046
	      4F522041
	      2047414D
	      453F
2082:	1822  574F554C	ANAMSG  DB      "WOULD YOU LIKE TO ANALYZE A POSITION?"
	      4420594F
	      55204C49
	      4B452054
	      4F20414E
	      414C595A
	      45204120
	      504F5349
	      54494F4E
	      3F
2083:	1847  444F2059	CLRMSG  DB      "DO YOU WANT TO PLAY WHITE(w) OR BLACK(b)?"
	      4F552057
	      414E5420
	      544F2050
	      4C415920
	      57484954
	      45287729
	      204F5220
	      424C4143
	      4B286229
	      3F
2084:	1870  53415247	TITLE1  DB      "SARGON"
	      4F4E
2085:	1876  504C4159	TITLE2  DB      "PLAYER"
	      4552
2086:	187C  20202020	SPACE   DB      "          "    ; For output of blank area
	      20202020
	      2020
2087:	1886  303120  	MVENUM  DB      "01 "
2088:	1889  2020    	TITLE3  DB      "  "
2089:	188B  5B835D  	        DB      '[',$83,']'     ; Part of TITLE 3 - Underlines
2090:	188E  5B835D  	        DB      '[',$83,']'
2091:	1891  5B835D  	        DB      '[',$83,']'
2092:	1894  5B835D  	        DB      '[',$83,']'
2093:	1897  5B835D  	        DB      '[',$83,']'
2094:	189A  5B835D  	        DB      '[',$83,']'
2095:	189D  20      	        DB      " "
2096:	189E  5B835D  	        DB      '[',$83,']'
2097:	18A1  5B835D  	        DB      '[',$83,']'
2098:	18A4  5B835D  	        DB      '[',$83,']'
2099:	18A7  5B835D  	        DB      '[',$83,']'
2100:	18AA  5B835D  	        DB      '[',$83,']'
2101:	18AD  5B835D  	        DB      '[',$83,']'
2102:	18B0  20      	        DB      " "
2103:	18B1  61312D61	MVEMSG  DB      "a1-a1"
	      31
2104:	18B6  302D3020	O_O     DB      "0-0  "
	      20
2105:	18BB  302D302D	O_O_O   DB      "0-0-0"
	      30
2106:	18C0  43484543	CKMSG   DB      "CHECK"
	      4B
2107:	18C5  4D415445	MTMSG   DB      "MATE IN "
	      20494E20
2108:	18CD  32      	MTPL    DB      "2"
2109:	18CE  4B515242	PCS     DB      "KQRBNP"        ; Valid piece characters
	      4E50
2110:	18D4  594F5520	UWIN    DB      "YOU WIN"
	      57494E
2111:	18DB  49205749	IWIN    DB      "I WIN"
	      4E
2112:	18E0  43415245	AGAIN   DB      "CARE FOR ANOTHER GAME?"
	      20464F52
	      20414E4F
	      54484552
	      2047414D
	      453F
2113:	18F6  49532054	CRTNES  DB      "IS THIS RIGHT?"
	      48495320
	      52494748
	      543F
2114:	1904  53454C45	PLYDEP  DB      "SELECT LOOK AHEAD (1-6)"
	      4354204C
	      4F4F4B20
	      41484541
	      44202831
	      2D3629
2115:	191B  20202020	TITLE4  DB      "                "
	      20202020
	      20202020
	      20202020
2116:	192B  57484F53	WSMOVE  DB      "WHOSE MOVE IS IT?"
	      45204D4F
	      56452049
	      53204954
	      3F
2117:	193C  5B1C5D  	BLANKR  DB      '[',$1C,']'     ; Control-\
2118:	193F  50785065	P_PEP   DB      "PxPep"
	      70
2119:	1944  494E5641	INVAL1  DB      "INVALID MOVE"
	      4C494420
	      4D4F5645
2120:	1950  54525920	INVAL2  DB      "TRY AGAIN"
	      41474149
	      4E
2121:			
2122:			;*******************************************************
2123:			; VARIABLES
2124:			;*******************************************************
2125:	1959          	BRDPOS  DS      1               ; Index into the board array
2126:	195A          	ANBDPS  DS      1               ; Additional index required for ANALYS
2127:	195B  0002    	INDXER  DW      BLBASE          ; Index into graphics data base
2128:	195D          	NORMAD  DS      2               ; The address of the upper left hand
2129:			                                ; corner of the square on the board
2130:	195F  00      	LINECT  DB      0               ; Current line number
2131:			
2132:			;*******************************************************
2133:			; MACRO DEFINITIONS
2134:			;*******************************************************
2135:			; All input/output to SARGON is handled in the form of
2136:			; macro calls to simplify conversion to alternate systems.
2137:			; All of the input/output macros conform to the Jove monitor
2138:			; of the Jupiter III computer.
2139:			;*******************************************************
2140:			;*** OUTPUT <CR><LF> ***
2141:			CARRET  MACRO
2142:			        RST     38h
2143:			        DB      92H,1AH
2144:			        DW      0
2145:			        ENDM
2146:			
2147:			;*** CLEAR SCREEN ***
2148:			CLRSCR  MACRO
2149:			        RST     38h
2150:			        DB      0B2H,1AH
2151:			        DW      BLANKR,1
2152:			        ENDM
2153:			
2154:			;*** PRINT ANY LINE (NAME, LENGTH) ***
2155:			PRTLIN  MACRO   NAME,LNGTH
2156:			        RST     38h
2157:			        DB      0B2H,1AH
2158:			        DW      NAME,LNGTH
2159:			        ENDM
2160:			
2161:			;*** PRINT ANY BLOCK (NAME, LENGTH) ***
2162:			PRTBLK  MACRO   NAME,LNGTH
2163:			        RST     38h
2164:			        DB      0B3H,1AH
2165:			        DW      NAME,LNGTH
2166:			        ENDM
2167:			
2168:			;*** EXIT TO MONITOR ***
2169:			EXIT    MACRO
2170:			        RST     38h
2171:			        DB      01FH
2172:			        ENDM
2173:			
2174:			;***********************************************************
2175:			; MAIN PROGRAM DRIVER
2176:			;***********************************************************
2177:			; FUNCTION:   --  To coordinate the game moves.
2178:			;
2179:			; CALLED BY:  --  None
2180:			;
2181:			; CALLS:      --  INTERR
2182:			;                 INITBD
2183:			;                 DSPBRD
2184:			;                 CPTRMV
2185:			;                 PLYRMV
2186:			;                 TBCPCL
2187:			;                 PGIFND
2188:			;
2189:			; MACRO CALLS:    CLRSCR
2190:			;                 CARRET
2191:			;                 PRTLIN
2192:			;                 PRTBLK
2193:			;
2194:			; ARGUMENTS:      None
2195:			;***********************************************************
2196:	1A00          	        ORG     START+1A00H     ; Above the move logic
2197:	1A00  31FF02  	DRIVER: LD      sp,STACK        ; Set stack pointer
2198:	1A03' FFB21A3C	        CLRSCR                  ; Blank out screen
	      190100
2199:	1A0A' FFB21A00	        PRTLIN  GRTTNG,34       ; Output greeting
	      182200
2200:	1A11  CD431D  	DRIV01: CALL    CHARTR          ; Accept answer
2201:	1A14' FF921A00	        CARRET                  ; New line
	      00
2202:	1A19  FE59    	        CP      59H             ; Is it a 'Y' ?
2203:	1A1B  C2B81D  	        JP      NZ,ANALYS       ; Yes - jump
2204:	1A1E  97      	        SUB     a               ; Code of White is zero
2205:	1A1F  322100  	        LD      (COLOR),a       ; White always moves first
2206:	1A22  CDB91A  	        CALL    INTERR          ; Players color/search depth
2207:	1A25  CD000B  	        CALL    INITBD          ; Initialize board array
2208:	1A28  3E01    	        LD      a,1             ; Move number is 1 at at start
2209:	1A2A  322600  	        LD      (MOVENO),a      ; Save
2210:	1A2D  325F19  	        LD      (LINECT),a      ; Line number is one at start
2211:	1A30  218618  	        LD      hl,MVENUM       ; Address of ascii move number
2212:	1A33  3630    	        LD      (hl),30H        ; Init to '01 '
2213:	1A35  23      	        INC     hl
2214:	1A36  3631    	        LD      (hl),31H
2215:	1A38  23      	        INC     hl
2216:	1A39  3620    	        LD      (hl),20H
2217:	1A3B  CDDB1E  	        CALL    DSPBRD          ; Set up graphics board
2218:	1A3E' FFB21A1B	        PRTLIN  TITLE4,15       ; Put up player headings
	      190F00
2219:	1A45' FFB21A89	        PRTLIN  TITLE3,15
	      180F00
2220:	1A4C' FFB31A86	DRIV04: PRTBLK  MVENUM,3        ; Display move number
	      180300
2221:	1A53  3A2000  	        LD      a,(KOLOR)       ; Bring in computer's color
2222:	1A56  A7      	        AND     a               ; Is it white ?
2223:	1A57  201C    	        JR      NZ,DR08         ; No - jump
2224:	1A59  CD5D1D  	        CALL    PGIFND          ; New page if needed
2225:	1A5C  FE01    	        CP      1               ; Was page turned ?
2226:	1A5E  CC261C  	        CALL    Z,TBCPCL        ; Yes - Tab to computers column
2227:	1A61  CD211B  	        CALL    CPTRMV          ; Make and write computers move
2228:	1A64' FFB31A7C	        PRTBLK  SPACE,1         ; Output a space
	      180100
2229:	1A6B  CD711C  	        CALL    PLYRMV          ; Accept and make players move
2230:	1A6E' FF921A00	        CARRET                  ; New line
	      00
2231:	1A73  181A    	        JR      DR0C            ; Jump
2232:	1A75  CD711C  	DR08:   CALL    PLYRMV          ; Accept and make players move
2233:	1A78' FFB31A7C	        PRTBLK  SPACE,1         ; Output a space
	      180100
2234:	1A7F  CD5D1D  	        CALL    PGIFND          ; New page if needed
2235:	1A82  FE01    	        CP      1               ; Was page turned ?
2236:	1A84  CC261C  	        CALL    Z,TBCPCL        ; Yes - Tab to computers column
2237:	1A87  CD211B  	        CALL    CPTRMV          ; Make and write computers move
2238:	1A8A' FF921A00	        CARRET                  ; New line
	      00
2239:	1A8F  218818  	DR0C:   LD      hl,MVENUM+2     ; Addr of 3rd char of move
2240:	1A92  3E20    	        LD      a,20H           ; Ascii space
2241:	1A94  BE      	        CP      (hl)            ; Is char a space ?
2242:	1A95  3E3A    	        LD      a,3AH           ; Set up test value
2243:	1A97  2806    	        JR      Z,DR10          ; Yes - jump
2244:	1A99  34      	        INC     (hl)            ; Increment value
2245:	1A9A  BE      	        CP      (hl)            ; Over Ascii 9 ?
2246:	1A9B  2015    	        JR      NZ,DR14         ; No - jump
2247:	1A9D  3630    	        LD      (hl),30H        ; Set char to zero
2248:	1A9F  2B      	DR10:   DEC     hl              ; 2nd char of Ascii move no.
2249:	1AA0  34      	        INC     (hl)            ; Increment value
2250:	1AA1  BE      	        CP      (hl)            ; Over Ascii 9 ?
2251:	1AA2  200E    	        JR      NZ,DR14         ; No - jump
2252:	1AA4  3630    	        LD      (hl),30H        ; Set char to zero
2253:	1AA6  2B      	        DEC     hl              ; 1st char of Ascii move no.
2254:	1AA7  34      	        INC     (hl)            ; Increment value
2255:	1AA8  BE      	        CP      (hl)            ; Over Ascii 9 ?
2256:	1AA9  2007    	        JR      NZ,DR14         ; No - jump
2257:	1AAB  3631    	        LD      (hl),31H        ; Make 1st char a one
2258:	1AAD  3E30    	        LD      a,30H           ; Make 3rd char a zero
2259:	1AAF  328818  	        LD      (MVENUM+2),a
2260:	1AB2  212600  	DR14:   LD      hl,MOVENO       ; Hexadecimal move number
2261:	1AB5  34      	        INC     (hl)            ; Increment
2262:	1AB6  C34C1A  	        JP      DRIV04          ; Jump
2263:			
2264:			;***********************************************************
2265:			; INTERROGATION FOR PLY & COLOR
2266:			;***********************************************************
2267:			; FUNCTION:   --  To query the player for his choice of ply
2268:			;                 depth and color.
2269:			;
2270:			; CALLED BY:  --  DRIVER
2271:			;
2272:			; CALLS:      --  CHARTR
2273:			;
2274:			; MACRO CALLS:    PRTLIN
2275:			;                 CARRET
2276:			;
2277:			; ARGUMENTS:  --  None
2278:			;***********************************************************
2279:	1AB9' FFB21A47	INTERR: PRTLIN  CLRMSG,41       ; Request color choice
	      182900
2280:	1AC0  CD431D  	        CALL    CHARTR          ; Accept response
2281:	1AC3' FF921A00	        CARRET                  ; New line
	      00
2282:	1AC8  FE57    	        CP      57H             ; Did player request white ?
2283:	1ACA  281C    	        JR      Z,IN04          ; Yes - branch
2284:	1ACC  97      	        SUB     a               ; Set computers color to white
2285:	1ACD  322000  	        LD      (KOLOR),a
2286:	1AD0  217018  	        LD      hl,TITLE1       ; Prepare move list titles
2287:	1AD3  111D19  	        LD      de,TITLE4+2
2288:	1AD6  010600  	        LD      bc,6
2289:	1AD9  EDB0    	        LDIR
2290:	1ADB  217618  	        LD      hl,TITLE2
2291:	1ADE  112419  	        LD      de,TITLE4+9
2292:	1AE1  010600  	        LD      bc,6
2293:	1AE4  EDB0    	        LDIR
2294:	1AE6  181B    	        JR      IN08            ; Jump
2295:	1AE8  3E80    	IN04:   LD      a,80H           ; Set computers color to black
2296:	1AEA  322000  	        LD      (KOLOR),a
2297:	1AED  217618  	        LD      hl,TITLE2       ; Prepare move list titles
2298:	1AF0  111D19  	        LD      de,TITLE4+2
2299:	1AF3  010600  	        LD      bc,6
2300:	1AF6  EDB0    	        LDIR
2301:	1AF8  217018  	        LD      hl,TITLE1
2302:	1AFB  112419  	        LD      de,TITLE4+9
2303:	1AFE  010600  	        LD      bc,6
2304:	1B01  EDB0    	        LDIR
2305:	1B03' FFB21A04	IN08:   PRTLIN  PLYDEP,23       ; Request depth of search
	      191700
2306:	1B0A  CD431D  	        CALL    CHARTR          ; Accept response
2307:	1B0D' FF921A00	        CARRET                  ; New line
	      00
2308:	1B12  212700  	        LD      hl,PLYMAX       ; Address of ply depth variabl
2309:	1B15  3602    	        LD      (hl),2          ; Default depth of search
2310:	1B17  FE31    	        CP      31H             ; Under minimum of 1 ?
2311:	1B19  F8      	        RET     M               ; Yes - return
2312:	1B1A  FE37    	        CP      37H             ; Over maximum of 6 ?
2313:	1B1C  F0      	        RET     P               ; Yes - return
2314:	1B1D  D630    	        SUB     30H             ; Subtract Ascii constant
2315:	1B1F  77      	        LD      (hl),a          ; Set desired depth
2316:	1B20  C9      	        RET                     ; Return
2317:			
2318:			;***********************************************************
2319:			; COMPUTER MOVE ROUTINE
2320:			;***********************************************************
2321:			; FUNCTION:   --  To control the search for the computers move
2322:			;                 and the display of that move on the board
2323:			;                 and in the move list.
2324:			;
2325:			; CALLED BY:  --  DRIVER
2326:			;
2327:			; CALLS:      --  FNDMOV
2328:			;                 FCDMAT
2329:			;                 MOVE
2330:			;                 EXECMV
2331:			;                 BITASN
2332:			;                 INCHK
2333:			;
2334:			; MACRO CALLS:    PRTBLK
2335:			;                 CARRET
2336:			;
2337:			; ARGUMENTS:  --  None
2338:			;***********************************************************
2339:	1B21  CDB812  	CPTRMV: CALL    FNDMOV          ; Select best move
2340:	1B24  2A1A00  	        LD      hl,(BESTM)      ; Move list pointer variable
2341:	1B27  221600  	        LD      (MLPTRJ),hl     ; Pointer to move data
2342:	1B2A  3A5401  	        LD      a,(SCORE+1)     ; To check for mates
2343:	1B2D  FE01    	        CP      1               ; Mate against computer ?
2344:	1B2F  2005    	        JR      NZ,CP0C         ; No - jump
2345:	1B31  0E01    	        LD      c,1             ; Computer mate flag
2346:	1B33  CDAF1B  	        CALL    FCDMAT          ; Full checkmate ?
2347:	1B36  CD7311  	CP0C:   CALL    MOVE            ; Produce move on board array
2348:	1B39  CD5E20  	        CALL    EXECMV          ; Make move on graphics board
2349:			                                ; and return info about it
2350:	1B3C  78      	        LD      a,b             ; Special move flags
2351:	1B3D  A7      	        AND     a               ; Special ?
2352:	1B3E  2017    	        JR      NZ,CP10         ; Yes - jump
2353:	1B40  53      	        LD      d,e             ; "To" position of the move
2354:	1B41  CD621C  	        CALL    BITASN          ; Convert to Ascii
2355:	1B44  22B418  	        LD      (MVEMSG+3),hl   ; Put in move message
2356:	1B47  51      	        LD      d,c             ; "From" position of the move
2357:	1B48  CD621C  	        CALL    BITASN          ; Convert to Ascii
2358:	1B4B  22B118  	        LD      (MVEMSG),hl     ; Put in move message
2359:	1B4E' FFB31AB1	        PRTBLK  MVEMSG,5        ; Output text of move
	      180500
2360:	1B55  1821    	        JR      CP1C            ; Jump
2361:	1B57  CB48    	CP10:   BIT     1,b             ; King side castle ?
2362:	1B59  2809    	        JR      Z,rel020        ; No - jump
2363:	1B5B' FFB31AB6	        PRTBLK  O_O,5           ; Output "O-O"
	      180500
2364:	1B62  1814    	        JR      CP1C            ; Jump
2365:	1B64  CB50    	rel020: BIT     2,b             ; Queen side castle ?
2366:	1B66  2809    	        JR      Z,rel021        ; No - jump
2367:	1B68' FFB31ABB	        PRTBLK  O_O_O,5         ; Output "O-O-O"
	      180500
2368:	1B6F  1807    	        JR      CP1C            ; Jump
2369:	1B71' FFB31A3F	rel021: PRTBLK  P_PEP,5         ; Output "PxPep" - En passant
	      190500
2370:	1B78  3A2100  	CP1C:   LD      a,(COLOR)       ; Should computer call check ?
2371:	1B7B  47      	        LD      b,a
2372:	1B7C  EE80    	        XOR     80H             ; Toggle color
2373:	1B7E  322100  	        LD      (COLOR),a
2374:	1B81  CD980D  	        CALL    INCHK           ; Check for check
2375:	1B84  A7      	        AND     a               ; Is enemy in check ?
2376:	1B85  78      	        LD      a,b             ; Restore color
2377:	1B86  322100  	        LD      (COLOR),a
2378:	1B89  2818    	        JR      Z,CP24          ; No - return
2379:	1B8B' FF921A00	        CARRET                  ; New line
	      00
2380:	1B90  3A5401  	        LD      a,(SCORE+1)     ; Check for player mated
2381:	1B93  FEFF    	        CP      0FFH            ; Forced mate ?
2382:	1B95  C44E1C  	        CALL    NZ,TBCPMV       ; No - Tab to computer column
2383:	1B98' FFB31AC0	        PRTBLK  CKMSG,5         ; Output "check"
	      180500
2384:	1B9F  215F19  	        LD      hl,LINECT       ; Address of screen line count
2385:	1BA2  34      	        INC     (hl)            ; Increment for message
2386:	1BA3  3A5401  	CP24:   LD      a,(SCORE+1)     ; Check again for mates
2387:	1BA6  FEFF    	        CP      0FFH            ; Player mated ?
2388:	1BA8  C0      	        RET     NZ              ; No - return
2389:	1BA9  0E00    	        LD      c,0             ; Set player mate flag
2390:	1BAB  CDAF1B  	        CALL    FCDMAT          ; Full checkmate ?
2391:	1BAE  C9      	        RET                     ; Return
2392:			
2393:			;***********************************************************
2394:			; FORCED MATE HANDLING
2395:			;***********************************************************
2396:			; FUNCTION:   --  To examine situations where there exits
2397:			;                 a forced mate and determine whether or
2398:			;                 not the current move is checkmate. If it is,
2399:			;                 a losing player is offered another game,
2400:			;                 while a loss for the computer signals the
2401:			;                 King to tip over in resignation.
2402:			;
2403:			; CALLED BY:  --  CPTRMV
2404:			;
2405:			; CALLS:      --  MATED
2406:			;                 CHARTR
2407:			;                 TBPLMV
2408:			;
2409:			; ARGUMENTS:  --  The only value passed in a register is the
2410:			;                 flag which tells FCDMAT whether the computer
2411:			;                 or the player is mated.
2412:			;***********************************************************
2413:	1BAF  3A2600  	FCDMAT: LD      a,(MOVENO)      ; Current move number
2414:	1BB2  47      	        LD      b,a             ; Save
2415:	1BB3  3A2500  	        LD      a,(PMATE)       ; Move number where mate occurs
2416:	1BB6  90      	        SUB     b               ; Number of moves till mate
2417:	1BB7  A7      	        AND     a               ; Checkmate ?
2418:	1BB8  2040    	        JR      NZ,FM0C         ; No - jump
2419:	1BBA  CB41    	        BIT     0,c             ; Check flag for who is mated
2420:	1BBC  2818    	        JR      Z,FM04          ; Jump if player
2421:	1BBE' FF921A00	        CARRET                  ; New line
	      00
2422:	1BC3' FFB21AC0	        PRTLIN  CKMSG,9         ; Print "CHECKMATE"
	      180900
2423:	1BCA  CD7C1D  	        CALL    MATED           ; Tip over King
2424:	1BCD' FFB21AD4	        PRTLIN  UWIN,7          ; Output "YOU WIN"
	      180700
2425:	1BD4  180E    	        JR      FM08            ; Jump
2426:	1BD6' FFB21AC5	FM04:   PRTLIN  MTMSG,4         ; Output "MATE"
	      180400
2427:	1BDD' FFB21ADB	        PRTLIN  IWIN,5          ; Output "I WIN"
	      180500
2428:	1BE4  E1      	FM08:   POP     hl              ; Remove return addresses
2429:	1BE5  E1      	        POP     hl
2430:	1BE6  CD431D  	        CALL    CHARTR          ; Input any char to play again
2431:	1BE9' FFB21A3C	FM09:   CLRSCR                  ; Blank screen
	      190100
2432:	1BF0' FFB21AE0	        PRTLIN  AGAIN,22        ; "CARE FOR ANOTHER GAME?"
	      181600
2433:	1BF7  C3111A  	        JP      DRIV01          ; Jump (Rest of game init)
2434:	1BFA  CB41    	FM0C:   BIT     0,c             ; Who has forced mate ?
2435:	1BFC  C0      	        RET     NZ              ; Return if player
2436:	B0FF  1A041917	        CARRET                  ; New line
	      00CD431D
	      FF921A00
	      00212700
	      3602FE31
	      F8FE37F0
	      D63077C9
	      CDB8122A
	      1A002216
	      003A5401
	      FE012005
	      0E01CDAF
	      1BCD7311
	      CD5E2078
	      A7201753
	      CD621C22
	      B41851CD
	      621C22B1
	      18FFB31A
	      B1180500
	      1821CB48
	      2809FFB3
	      1AB61805
	      001814CB
	      502809FF
	      B31ABB18
	      05001807
	      FFB31A3F
	      1905003A
	      210047EE
	      80322100
	      CD980DA7
	      78322100
	      2818FF92
	      1A00003A
	      5401FEFF
	      C44E1CFF
	      B31AC018
	      0500215F
	      19343A54
	      01FEFFC0
	      0E00CDAF
	      1BC93A26
	      00473A25
	      0090
	40CB  2818FF92
	      1A0000FF
	      B21AC018
	      0900CD7C
	      1DFFB21A
	      D4180700
	      180EFFB2
	      1AC51804
	      00FFB21A
	      DB180500
	      E1E1CD43
	      1DFFB21A
	      3C190100
	      FFB21AE0
	      181600C3
	      111ACB41
	      C0
	1A00: 1B
	0001  00000000
	      C63032CD
	      18FFB21A
	      C5180900
	      CD3A1CC9
	      FFB31A86
	      1803003A
2437:	1C02  C630    	        ADD     a,30H           ; Number of moves to Ascii
2438:	1C04  32CD18  	        LD      (MTPL),a        ; Place value in message
2439:	1C07' FFB21AC5	        PRTLIN  MTMSG,9         ; Output "MATE IN x MOVES"
	      180900
2440:	1C0E  CD3A1C  	        CALL    TBPLMV          ; Tab to players column
2441:	1C11  C9      	        RET                     ; Return
2442:			
2443:			;***********************************************************
2444:			; TAB TO PLAYERS COLUMN
2445:			;***********************************************************
2446:			; FUNCTION:   --  To space over in the move listing to the
2447:			;                 column in which the players moves are being
2448:			;                 recorded. This routine also reprints the
2449:			;                 move number.
2450:			;
2451:			; CALLED BY:  --  PLYRMV
2452:			;
2453:			; CALLS:      --  None
2454:			;
2455:			; MACRO CALLS:    PRTBLK
2456:			;
2457:			; ARGUMENTS:  --  None
2458:			;***********************************************************
2459:	1C12' FFB31A86	TBPLCL: PRTBLK  MVENUM,3        ; Reproduce move number
	      180300
2460:	1C19  3A2000  	        LD      a,(KOLOR)       ; Computers color
2461:	1C1C  A7      	        AND     a               ; Is computer white ?
2462:	1C1D  C0      	        RET     NZ              ; No - return
2463:	1C1E' FFB31A7C	        PRTBLK  SPACE,6         ; Tab to next column
	      180600
2464:	1C25  C9      	        RET                     ; Return
2465:			
2466:			;***********************************************************
2467:			; TAB TO COMPUTERS COLUMN
2468:			;***********************************************************
2469:			; FUNCTION:   --  To space over in the move listing to the
2470:			;                 column in which the computers moves are
2471:			;                 being recorded. This routine also reprints
2472:			;                 the move number.
2473:			;
2474:			; CALLED BY:  --  DRIVER
2475:			;                 CPTRMV
2476:			;
2477:			; CALLS:      --  None
2478:			;
2479:			; MACRO CALLS:    PRTBLK
2480:			;
2481:			; ARGUMENTS:  --  None
2482:			;***********************************************************
2483:	1C26' FFB31A86	TBCPCL: PRTBLK  MVENUM,3        ; Reproduce move number
	      180300
2484:	1C2D  3A2000  	        LD      a,(KOLOR)       ; Computer's color
2485:	1C30  A7      	        AND     a               ; Is computer white ?
2486:	1C31  C8      	        RET     Z               ; Yes - return
2487:	1C32' FFB31A7C	        PRTBLK  SPACE,6         ; Tab to next column
	      180600
2488:	1C39  C9      	        RET                     ; Return
2489:			
2490:			;***********************************************************
2491:			; TAB TO PLAYERS COLUMN W/0 MOVE NO.
2492:			;***********************************************************
2493:			; FUNCTION:   --  Like TBPLCL, except that the move number
2494:			;                 is not reprinted.
2495:			;
2496:			; CALLED BY:  --  FCDMAT
2497:			;***********************************************************
2498:	1C3A' FFB31A7C	TBPLMV: PRTBLK  SPACE,3
	      180300
2499:	1C41  3A2000  	        LD      a,(KOLOR)
2500:	1C44  A7      	        AND     a
2501:	1C45  C0      	        RET     NZ
2502:	1C46' FFB31A7C	        PRTBLK  SPACE,6
	      180600
2503:	1C4D  C9      	        RET
2504:			
2505:			;***********************************************************
2506:			; TAB TO COMPUTERS COLUMN W/O MOVE NO.
2507:			;***********************************************************
2508:			; FUNCTION:   --  Like TBCPCL, except that the move number
2509:			;                 is not reprinted.
2510:			;
2511:			; CALLED BY:  --  CPTRMV
2512:			;***********************************************************
2513:	1C4E' FFB31A7C	TBCPMV: PRTBLK  SPACE,3
	      180300
2514:	1C55  3A2000  	        LD      a,(KOLOR)
2515:	1C58  A7      	        AND     a
2516:	1C59  C8      	        RET     Z
2517:	1C5A' FFB31A7C	        PRTBLK  SPACE,6
	      180600
2518:	1C61  C9      	        RET
2519:			
2520:			;***********************************************************
2521:			; BOARD INDEX TO ASCII SQUARE NAME
2522:			;***********************************************************
2523:			; FUNCTION:   --  To translate a hexadecimal index in the
2524:			;                 board array into an ascii description
2525:			;                 of the square in algebraic chess notation.
2526:			;
2527:			; CALLED BY:  --  CPTRMV
2528:			;
2529:			; CALLS:      --  DIVIDE
2530:			;
2531:			; ARGUMENTS:  --  Board index input in register D and the
2532:			;                 Ascii square name is output in register
2533:			;                 pair HL.
2534:			;***********************************************************
2535:	1C62  97      	BITASN: SUB     a               ; Get ready for division
2536:	1C63  1E0A    	        LD      e,10
2537:	1C65  CD0420  	        CALL    DIVIDE          ; Divide
2538:	1C68  15      	        DEC     d               ; Get rank on 1-8 basis
2539:	1C69  C660    	        ADD     a,60H           ; Convert file to Ascii (a-h)
2540:	1C6B  6F      	        LD      l,a             ; Save
2541:	1C6C  7A      	        LD      a,d             ; Rank
2542:	1C6D  C630    	        ADD     a,30H           ; Convert rank to Ascii (1-8)
2543:	1C6F  67      	        LD      h,a             ; Save
2544:	1C70  C9      	        RET                     ; Return
2545:			
2546:			;***********************************************************
2547:			; PLAYERS MOVE ANALYSIS
2548:			;***********************************************************
2549:			; FUNCTION:   --  To accept and validate the players move
2550:			;                 and produce it on the graphics board. Also
2551:			;                 allows player to resign the game by
2552:			;                 entering a control-R.
2553:			;
2554:			; CALLED BY:  --  DRIVER
2555:			;
2556:			; CALLS:      --  CHARTR
2557:			;                 ASNTBI
2558:			;                 VALMOV
2559:			;                 EXECMV
2560:			;                 PGIFND
2561:			;                 TBPLCL
2562:			;
2563:			; ARGUMENTS:  --  None
2564:			;***********************************************************
2565:	1C71  CD431D  	PLYRMV: CALL    CHARTR          ; Accept "from" file letter
2566:	1C74  FE12    	        CP      12H             ; Is it instead a Control-R ?
2567:	1C76  CAE91B  	        JP      Z,FM09          ; Yes - jump
2568:	1C79  67      	        LD      h,a             ; Save
2569:	1C7A  CD431D  	        CALL    CHARTR          ; Accept "from" rank number
2570:	1C7D  6F      	        LD      l,a             ; Save
2571:	1C7E  CDC71C  	        CALL    ASNTBI          ; Convert to a board index
2572:	1C81  90      	        SUB     b               ; Gives board index, if valid
2573:	1C82  2822    	        JR      Z,PL08          ; Jump if invalid
2574:	1C84  32B118  	        LD      (MVEMSG),a      ; Move list "from" position
2575:	1C87  CD431D  	        CALL    CHARTR          ; Accept separator & ignore it
2576:	1C8A  CD431D  	        CALL    CHARTR          ; Repeat for "to" position
2577:	1C8D  67      	        LD      h,a
2578:	1C8E  CD431D  	        CALL    CHARTR
2579:	1C91  6F      	        LD      l,a
2580:	1C92  CDC71C  	        CALL    ASNTBI
2581:	1C95  90      	        SUB     b
2582:	1C96  280E    	        JR      Z,PL08
2583:	1C98  32B218  	        LD      (MVEMSG+1),a    ; Move list "to" position
2584:	1C9B  CDEC1C  	        CALL    VALMOV          ; Determines if a legal move
2585:	1C9E  A7      	        AND     a               ; Legal ?
2586:	1C9F  C2A61C  	        JP      NZ,PL08         ; No - jump
2587:	1CA2  CD5E20  	        CALL    EXECMV          ; Make move on graphics board
2588:	1CA5  C9      	        RET                     ; Return
2589:	1CA6  215F19  	PL08:   LD      hl,LINECT       ; Address of screen line count
2590:	1CA9  34      	        INC     (hl)            ; Increase by 2 for message
2591:	1CAA  34      	        INC     (hl)
2592:	1CAB' FF921A00	        CARRET                  ; New line
	      00
2593:	1CB0  CD5D1D  	        CALL    PGIFND          ; New page if needed
2594:	1CB3' FFB21A44	        PRTLIN  INVAL1,12       ; Output "INVALID MOVE"
	      190C00
2595:	1CBA' FFB21A50	        PRTLIN  INVAL2,9        ; Output "TRY AGAIN"
	      190900
2596:	1CC1  CD121C  	        CALL    TBPLCL          ; Tab to players column
2597:	1CC4  C3711C  	        JP      PLYRMV          ; Jump
2598:			
2599:			;***********************************************************
2600:			; ASCII SQUARE NAME TO BOARD INDEX
2601:			;***********************************************************
2602:			; FUNCTION:   --  To convert an algebraic square name in
2603:			;                 Ascii to a hexadecimal board index.
2604:			;                 This routine also checks the input for
2605:			;                 validity.
2606:			;
2607:			; CALLED BY:  --  PLYRMV
2608:			;
2609:			; CALLS:      --  MLTPLY
2610:			;
2611:			; ARGUMENTS:  --  Accepts the square name in register pair HL
2612:			;                 and outputs the board index in register A.
2613:			;                 Register B = 0 if ok. Register B = Register
2614:			;                 A if invalid.
2615:			;***********************************************************
2616:	1CC7  7D      	ASNTBI: LD      a,l             ; Ascii rank (1 - 8)
2617:	1CC8  D630    	        SUB     30H             ; Rank 1 - 8
2618:	1CCA  FE01    	        CP      1               ; Check lower bound
2619:	1CCC  FAEA1C  	        JP      M,AT04          ; Jump if invalid
2620:	1CCF  FE09    	        CP      9               ; Check upper bound
2621:	1CD1  3017    	        JR      NC,AT04         ; Jump if invalid
2622:	1CD3  3C      	        INC     a               ; Rank 2 - 9
2623:	1CD4  57      	        LD      d,a             ; Ready for multiplication
2624:	1CD5  1E0A    	        LD      e,10
2625:	1CD7  CD1620  	        CALL    MLTPLY          ; Multiply
2626:	1CDA  7C      	        LD      a,h             ; Ascii file letter (a - h)
2627:	1CDB  D640    	        SUB     40H             ; File 1 - 8
2628:	1CDD  FE01    	        CP      1               ; Check lower bound
2629:	1CDF  FAEA1C  	        JP      M,AT04          ; Jump if invalid
2630:	1CE2  FE09    	        CP      9               ; Check upper bound
2631:	1CE4  3004    	        JR      NC,AT04         ; Jump if invalid
2632:	1CE6  82      	        ADD     a,d             ; File+Rank(20-90)=Board index
2633:	1CE7  0600    	        LD      b,0             ; Ok flag
2634:	1CE9  C9      	        RET                     ; Return
2635:	1CEA  47      	AT04:   LD      b,a             ; Invalid flag
2636:	1CEB  C9      	        RET                     ; Return
2637:			
2638:			;***********************************************************
2639:			; VALIDATE MOVE SUBROUTINE
2640:			;***********************************************************
2641:			; FUNCTION:   --  To check a players move for validity.
2642:			;
2643:			; CALLED BY:  --  PLYRMV
2644:			;
2645:			; CALLS:      --  GENMOV
2646:			;                 MOVE
2647:			;                 INCHK
2648:			;                 UNMOVE
2649:			;
2650:			; ARGUMENTS:  --  Returns flag in register A, 0 for valid
2651:			;                 and 1 for invalid move.
2652:			;***********************************************************
2653:	1CEC  2A1600  	VALMOV: LD      hl,(MLPTRJ)     ; Save last move pointer
2654:	1CEF  E5      	        PUSH    hl              ; Save register
2655:	1CF0  3A2000  	        LD      a,(KOLOR)       ; Computers color
2656:	1CF3  EE80    	        XOR     80H             ; Toggle color
2657:	1CF5  322100  	        LD      (COLOR),a       ; Store
2658:	1CF8  215D01  	        LD      hl,PLYIX-2      ; Load move list index
2659:	1CFB  221400  	        LD      (MLPTRI),hl
2660:	1CFE  210007  	        LD      hl,MLIST+1024   ; Next available list pointer
2661:	1D01  221E00  	        LD      (MLNXT),hl
2662:	1D04  CD560D  	        CALL    GENMOV          ; Generate opponents moves
2663:	1D07  DD210007	        LD      ix,MLIST+1024   ; Index to start of moves
2664:	1D0B  3AB118  	VA5:    LD      a,(MVEMSG)      ; "From" position
2665:	1D0E  DDBE02  	        CP      (ix+MLFRP)      ; Is it in list ?
2666:	1D11  2008    	        JR      NZ,VA6          ; No - jump
2667:	1D13  3AB218  	        LD      a,(MVEMSG+1)    ; "To" position
2668:	1D16  DDBE03  	        CP      (ix+MLTOP)      ; Is it in list ?
2669:	1D19  280F    	        JR      Z,VA7           ; Yes - jump
2670:	1D1B  DD5E00  	VA6:    LD      e,(ix+MLPTR)    ; Pointer to next list move
2671:	1D1E  DD5601  	        LD      d,(ix+MLPTR+1)
2672:	1D21  AF      	        XOR     a               ; At end of list ?
2673:	1D22  BA      	        CP      d
2674:	1D23  2817    	        JR      Z,VA10          ; Yes - jump
2675:	1D25  D5      	        PUSH    de              ; Move to X register
2676:	1D26  DDE1    	        POP     ix
2677:	1D28  18E1    	        JR      VA5             ; Jump
2678:	1D2A  DD221600	VA7:    LD      (MLPTRJ),ix     ; Save opponents move pointer
2679:	1D2E  CD7311  	        CALL    MOVE            ; Make move on board array
2680:	1D31  CD980D  	        CALL    INCHK           ; Was it a legal move ?
2681:	1D34  A7      	        AND     a
2682:	1D35  2002    	        JR      NZ,VA9          ; No - jump
2683:	1D37  E1      	VA8:    POP     hl              ; Restore saved register
2684:	1D38  C9      	        RET                     ; Return
2685:	1D39  CDE511  	VA9:    CALL    UNMOVE          ; Un-do move on board array
2686:	1D3C  3E01    	VA10:   LD      a,1             ; Set flag for invalid move
2687:	1D3E  E1      	        POP     hl              ; Restore saved register
2688:	1D3F  221600  	        LD      (MLPTRJ),hl     ; Save move pointer
2689:	1D42  C9      	        RET                     ; Return
2690:			
2691:			;***********************************************************
2692:			; ACCEPT INPUT CHARACTER
2693:			;***********************************************************
2694:			; FUNCTION:   --  Accepts a single character input from the
2695:			;                 console keyboard and places it in the A
2696:			;                 register. The character is also echoed on
2697:			;                 the video screen, unless it is a carriage
2698:			;                 return, line feed, or backspace.
2699:			;                 Lower case alphabetic characters are folded
2700:			;                 to upper case.
2701:			;
2702:			; CALLED BY:  --  DRIVER
2703:			;                 INTERR
2704:			;                 PLYRMV
2705:			;                 ANALYS
2706:			;
2707:			; CALLS:      --  None
2708:			;
2709:			; ARGUMENTS:  --  Character input is output in register A.
2710:			;
2711:			; NOTES:      --  This routine contains a reference to a
2712:			;                 monitor function of the Jove monitor, there-
2713:			;                 for the first few lines of this routine are
2714:			;                 system dependent.
2715:			;***********************************************************
2716:	1D43  FF      	CHARTR: RST     38h             ; Jove monitor single char inpt
2717:	1D44  8100    	        DB      81H,0
2718:	1D46  FE0D    	        CP      0DH             ; Carriage return ?
2719:	1D48  C8      	        RET     Z               ; Yes - return
2720:	1D49  FE0A    	        CP      0AH             ; Line feed ?
2721:	1D4B  C8      	        RET     Z               ; Yes - return
2722:	1D4C  FE08    	        CP      08H             ; Backspace ?
2723:	1D4E  C8      	        RET     Z               ; Yes - return
2724:	1D4F  FF      	        RST     38h             ; Jove monitor single char echo
2725:	1D50  811A    	        DB      81H,1AH
2726:	1D52  E67F    	        AND     7FH             ; Mask off parity bit
2727:	1D54  FE7B    	        CP      7BH             ; Upper range check (z+l)
2728:	1D56  F0      	        RET     P               ; No need to fold - return
2729:	1D57  FE61    	        CP      61H             ; Lower-range check (a)
2730:	1D59  F8      	        RET     M               ; No need to fold - return
2731:	1D5A  D620    	        SUB     20H             ; Change to one of A-Z
2732:	1D5C  C9      	        RET                     ; Return
2733:			
2734:			;***********************************************************
2735:			; NEW PAGE IF NEEDED
2736:			;***********************************************************
2737:			; FUNCTION:   --  To clear move list output when the column
2738:			;                 has been filled.
2739:			;
2740:			; CALLED BY:  --  DRIVER
2741:			;                 PLYRMV
2742:			;                 CPTRMV
2743:			;
2744:			; CALLS:     --   DSPBRD
2745:			;
2746:			; ARGUMENTS: --   Returns a 1 in the A register if a new
2747:			;                 page was turned.
2748:			;***********************************************************
2749:	1D5D  215F19  	PGIFND: LD      hl,LINECT       ; Addr of page position counter
2750:	1D60  34      	        INC     (hl)            ; Increment
2751:	1D61  3E1B    	        LD      a,1BH           ; Page bottom ?
2752:	1D63  BE      	        CP      (hl)
2753:	1D64  D0      	        RET     NC              ; No - return
2754:	1D65  CDDB1E  	        CALL    DSPBRD          ; Put up new page
2755:	1D68' FFB21A1B	        PRTLIN  TITLE4,15       ; Re-print titles
	      190F00
2756:	1D6F' FFB21A89	        PRTLIN  TITLE3,15
	      180F00
2757:	1D76  3E01    	        LD      a,1             ; Set line count back to 1
2758:	1D78  325F19  	        LD      (LINECT),a
2759:	1D7B  C9      	        RET                     ; Return
2760:			
2761:			;***********************************************************
2762:			; DISPLAY MATED KING
2763:			;***********************************************************
2764:			; FUNCTION:   --  To tip over the computers King when
2765:			;                 mated.
2766:			;
2767:			; CALLED BY:  --  FCDMAT
2768:			;
2769:			; CALLS:      --  CONVRT
2770:			;                 BLNKER
2771:			;                 INSPCE  (Abnormal Call to IP04)
2772:			;
2773:			; ARGUMENTS:  --  None
2774:			;***********************************************************
2775:	1D7C  3A2000  	MATED:  LD      a,(KOLOR)       ; Computers color
2776:	1D7F  A7      	        AND     a               ; Is computer white ?
2777:	1D80  2807    	        JR      Z,rel23         ; Yes - skip
2778:	1D82  0E02    	        LD      c,2             ; Set black piece flag
2779:	1D84  3A4F01  	        LD      a,(POSK+1)      ; Position of black King
2780:	1D87  1804    	        JR      MA08            ; Jump
2781:	1D89  4F      	rel23:  LD      c,a             ; Clear black piece flag
2782:	1D8A  3A4E01  	        LD      a,(POSK)        ; Position of white King
2783:	1D8D  325919  	MA08:   LD      (BRDPOS),a      ; Store King position
2784:	1D90  325A19  	        LD      (ANBDPS),a      ; Again
2785:	1D93  CDE01F  	        CALL    CONVRT          ; Getting norm address in HL
2786:	1D96  3E07    	        LD      a,7             ; Piece value of toppled King
2787:	1D98  060A    	        LD      b,10            ; Blink parameter
2788:	1D9A  CD2720  	        CALL    BLNKER          ; Blink King position
2789:	1D9D  FD21AC1D	        LD      iy,MA0C         ; Prepare for abnormal call
2790:	1DA1  FDE5    	        PUSH    iy
2791:	1DA3  E5      	        PUSH    hl
2792:	1DA4  C5      	        PUSH    bc
2793:	1DA5  D5      	        PUSH    de
2794:	1DA6  DDE5    	        PUSH    ix
2795:	1DA8  F5      	        PUSH    af
2796:	1DA9  C3691F  	        JP      IP04            ; Call INSPCE
2797:	1DAC  060A    	MA0C:   LD      b,10            ; Blink again
2798:	1DAE  3A5A19  	        LD      a,(ANBDPS)
2799:	1DB1  325919  	        LD      (BRDPOS),a
2800:	1DB4  CD2720  	        CALL    BLNKER
2801:	1DB7  C9      	        RET                     ; Return
2802:			
2803:			;***********************************************************
2804:			; SET UP POSITION FOR ANALYSIS
2805:			;***********************************************************
2806:			; FUNCTION:   --  To enable user to set up any position
2807:			;                 for analysis, or to continue to play
2808:			;                 the game. The routine blinks the board
2809:			;                 squares in turn and the user has the option
2810:			;                 of leaving the contents unchanged by a
2811:			;                 carriage return, emptying the square by a 0,
2812:			;                 or inputting a piece of his chosing. To
2813:			;                 enter a piece, type in piece-code,color-code,
2814:			;                 moved-code.
2815:			;
2816:			;                 Piece-code is a letter indicating the
2817:			;                 desired piece:
2818:			;                       K  -  King
2819:			;                       Q  -  Queen
2820:			;                       R  -  Rook
2821:			;                       B  -  Bishop
2822:			;                       N  -  Knight
2823:			;                       P  -  Pawn
2824:			;
2825:			;                 Color code is a letter, W for white, or B for
2826:			;                 black.
2827:			;
2828:			;                 Moved-code is a number. 0 indicates the piece has never
2829:			;                 moved. 1 indicates the piece has moved.
2830:			;
2831:			;                 A backspace will back up in the sequence of blinked
2832:			;                 squares. An Escape will terminate the blink cycle and
2833:			;                 verify that the position is correct, then procede
2834:			;                 with game initialization.
2835:			;
2836:			; CALLED BY:  --  DRIVER
2837:			;
2838:			; CALLS:      --  CHARTR
2839:			;                 DPSBRD
2840:			;                 BLNKER
2841:			;                 ROYALT
2842:			;                 PLYRMV
2843:			;                 CPTRMV
2844:			;
2845:			; MACRO CALLS:    PRTLIN
2846:			;                 EXIT
2847:			;                 CLRSCR
2848:			;                 PRTBLK
2849:			;                 CARRET
2850:			;
2851:			; ARGUMENTS:  --  None
2852:			;***********************************************************
2853:	1DB8' FFB21A22	ANALYS: PRTLIN  ANAMSG,37       ; "CARE TO ANALYSE A POSITION?"
	      182500
2854:	1DBF  CD431D  	        CALL    CHARTR          ; Accept answer
2855:	1DC2' FF921A00	        CARRET                  ; New line
	      00
2856:	1DC7  FE4E    	        CP      4EH             ; Is answer a "N" ?
2857:	1DC9  2002    	        JR      NZ,AN04         ; No - jump
2858:	1DCB' FF1F    	        EXIT                    ; Return to monitor
2859:	1DCD  CDDB1E  	AN04:   CALL    DSPBRD          ; Current board position
2860:	1DD0  3E15    	        LD      a,21            ; First board index
2861:	1DD2  325A19  	AN08:   LD      (ANBDPS),a      ; Save
2862:	1DD5  325919  	        LD      (BRDPOS),a
2863:	1DD8  CDE01F  	        CALL    CONVRT          ; Norm address into HL register
2864:	1DDB  320000  	        LD      (M1),a          ; Set up board index
2865:	1DDE  DD2A0000	        LD      ix,(M1)
2866:	1DE2  DD7EB4  	        LD      a,(ix+BOARD)    ; Get board contents
2867:	1DE5  FEFF    	        CP      0FFH            ; Border square ?
2868:	1DE7  283C    	        JR      Z,AN19          ; Yes - jump
2869:	1DE9  0604    	        LD      b,4H            ; Ready to blink square
2870:	1DEB  CD2720  	        CALL    BLNKER          ; Blink
2871:	1DEE  CD431D  	        CALL    CHARTR          ; Accept input
2872:	1DF1  FE1B    	        CP      1BH             ; Is it an escape ?
2873:	1DF3  2849    	        JR      Z,AN1B          ; Yes - jump
2874:	1DF5  FE08    	        CP      08H             ; Is it a backspace ?
2875:	1DF7  2836    	        JR      Z,AN1A          ; Yes - jump
2876:	1DF9  FE0D    	        CP      0DH             ; Is it a carriage return ?
2877:	1DFB  2828    	        JR      Z,AN19          ; Yes - jump
2878:	1DFD  010700  	        LD      bc,7            ; Number of types of pieces + 1
2879:	1E00  21CE18  	        LD      hl,PCS          ; Address of piece symbol table
2880:	1E03  EDB1    	        CPIR                    ; Search
2881:	1E05  2018    	        JR      NZ,AN18         ; Jump if not found
2882:	1E07  CD431D  	        CALL    CHARTR          ; Accept and ignore separator
2883:	1E0A  CD431D  	        CALL    CHARTR          ; Color of piece
2884:	1E0D  FE42    	        CP      42H             ; Is it black ?
2885:	1E0F  2002    	        JR      NZ,rel022       ; No - skip
2886:	1E11  CBF9    	        SET     7,c             ; Black piece indicator
2887:	1E13  CD431D  	rel022: CALL    CHARTR          ; Accept and ignore separator
2888:	1E16  CD431D  	        CALL    CHARTR          ; Moved flag
2889:	1E19  FE31    	        CP      31H             ; Has piece moved ?
2890:	1E1B  2002    	        JR      NZ,AN18         ; No - jump
2891:	1E1D  CBD9    	        SET     3,c             ; Set moved indicator
2892:	1E1F  DD71B4  	AN18:   LD      (ix+BOARD),c    ; Insert piece into board array
2893:	1E22  CDDB1E  	        CALL    DSPBRD          ; Update graphics board
2894:	1E25  3A5A19  	AN19:   LD      a,(ANBDPS)      ; Current board position
2895:	1E28  3C      	        INC     a               ; Next
2896:	1E29  FE63    	        CP      99              ; Done ?
2897:	1E2B  20A5    	        JR      NZ,AN08         ; No - jump
2898:	1E2D  189E    	        JR      AN04            ; Jump
2899:	1E2F  3A5A19  	AN1A:   LD      a,(ANBDPS)      ; Prepare to go back a square
2900:	1E32  D603    	        SUB     3               ; To get around border
2901:	1E34  FE14    	        CP      20              ; Off the other end ?
2902:	1E36  D2D21D  	        JP      NC,AN08         ; No - jump
2903:	1E39  3E62    	        LD      a,98            ; Wrap around to top of screen
2904:	1E3B  C3D21D  	AN0B:   JP      AN08            ; Jump
2905:	1E3E' FFB21AF6	AN1B:   PRTLIN  CRTNES,14       ; Ask if correct
	      180E00
2906:	1E45  CD431D  	        CALL    CHARTR          ; Accept answer
2907:	1E48  FE4E    	        CP      4EH             ; Is it "N" ?
2908:	1E4A  CACD1D  	        JP      Z,AN04          ; No - jump
2909:	1E4D  CDA41E  	        CALL    ROYALT          ; Update positions of royalty
2910:	1E50' FFB21A3C	        CLRSCR                  ; Blank screen
	      190100
2911:	1E57  CDB91A  	        CALL    INTERR          ; Accept color choice
2912:	1E5A' FFB21A2B	AN1C:   PRTLIN  WSMOVE,17       ; Ask whose move it is
	      191100
2913:	1E61  CD431D  	        CALL    CHARTR          ; Accept response
2914:	1E64  CDDB1E  	        CALL    DSPBRD          ; Display graphics board
2915:	1E67' FFB21A1B	        PRTLIN  TITLE4,15       ; Put up titles
	      190F00
2916:	1E6E' FFB21A89	        PRTLIN  TITLE3,15
	      180F00
2917:	1E75  FE57    	        CP      57H             ; Is is whites move ?
2918:	1E77  CA4C1A  	        JP      Z,DRIV04        ; Yes - jump
2919:	1E7A' FFB31A86	        PRTBLK  MVENUM,3        ; Print move number
	      180300
2920:	1E81' FFB31A7C	        PRTBLK  SPACE,6         ; Tab to blacks column
	      180600
2921:	1E88  3A2000  	        LD      a,(KOLOR)       ; Computer's color
2922:	1E8B  A7      	        AND     a               ; Is computer white ?
2923:	1E8C  200B    	        JR      NZ,AN20         ; No - jump
2924:	1E8E  CD711C  	        CALL    PLYRMV          ; Get players move
2925:	1E91' FF921A00	        CARRET                  ; New line
	      00
2926:	1E96  C38F1A  	        JP      DR0C            ; Jump
2927:	1E99  CD211B  	AN20:   CALL    CPTRMV          ; Get computers move
2928:	1E9C' FF921A00	        CARRET                  ; New line
	      00
2929:	1EA1  C38F1A  	        JP      DR0C            ; Jump
2930:			
2931:			;***********************************************************
2932:			; UPDATE POSITIONS OF ROYALTY
2933:			;***********************************************************
2934:			; FUNCTION:   --  To update the positions of the Kings
2935:			;                 and Queen after a change of board position
2936:			;                 in ANALYS.
2937:			;
2938:			; CALLED BY:  --  ANALYS
2939:			;
2940:			; CALLS:      --  None
2941:			;
2942:			; ARGUMENTS:  --  None
2943:			;***********************************************************
2944:	1EA4  214E01  	ROYALT: LD      hl,POSK         ; Start of Royalty array
2945:	1EA7  0604    	        LD      b,4             ; Clear all four positions
2946:	1EA9  3600    	back06: LD      (hl),0
2947:	1EAB  23      	        INC     hl
2948:	1EAC  10FB    	        DJNZ    back06
2949:	1EAE  3E15    	        LD      a,21            ; First board position
2950:	1EB0  320000  	RY04:   LD      (M1),a          ; Set up board index
2951:	1EB3  214E01  	        LD      hl,POSK         ; Address of King position
2952:	1EB6  DD2A0000	        LD      ix,(M1)
2953:	1EBA  DD7EB4  	        LD      a,(ix+BOARD)    ; Fetch board contents
2954:	1EBD  CB7F    	        BIT     7,a             ; Test color bit
2955:	1EBF  2801    	        JR      Z,rel023        ; Jump if white
2956:	1EC1  23      	        INC     hl              ; Offset for black
2957:	1EC2  E607    	rel023: AND     7               ; Delete flags, leave piece
2958:	1EC4  FE06    	        CP      KING            ; King ?
2959:	1EC6  2806    	        JR      Z,RY08          ; Yes - jump
2960:	1EC8  FE05    	        CP      QUEEN           ; Queen ?
2961:	1ECA  2006    	        JR      NZ,RY0C         ; No - jump
2962:	1ECC  23      	        INC     hl              ; Queen position
2963:	1ECD  23      	        INC     hl              ; Plus offset
2964:	1ECE  3A0000  	RY08:   LD      a,(M1)          ; Index
2965:	1ED1  77      	        LD      (hl),a          ; Save
2966:	1ED2  3A0000  	RY0C:   LD      a,(M1)          ; Current position
2967:	1ED5  3C      	        INC     a               ; Next position
2968:	1ED6  FE63    	        CP      99              ; Done.?
2969:	1ED8  20D6    	        JR      NZ,RY04         ; No - jump
2970:	1EDA  C9      	        RET                     ; Return
2971:			
2972:			;***********************************************************
2973:			; SET UP EMPTY BOARD
2974:			;***********************************************************
2975:			; FUNCTION:   --  Display graphics board and pieces.
2976:			;
2977:			; CALLED BY:  --  DRIVER
2978:			;                 ANALYS
2979:			;                 PGIFND
2980:			;
2981:			; CALLS:      --  CONVRT
2982:			;                 INSPCE
2983:			;
2984:			; ARGUMENTS:  --  None
2985:			;
2986:			; NOTES:      --  This routine makes use of several fixed
2987:			;                 addresses in the video storage area of
2988:			;                 the Jupiter III computer, and is therefor
2989:			;                 system dependent. Each such reference will
2990:			;                 be marked.
2991:			;***********************************************************
2992:	1EDB  C5      	DSPBRD: PUSH    bc              ; Save registers
2993:	1EDC  D5      	        PUSH    de
2994:	1EDD  E5      	        PUSH    hl
2995:	1EDE  F5      	        PUSH    af
2996:	1EDF' FFB21A3C	        CLRSCR                  ; Blank screen
	      190100
2997:	1EE6  2100C0  	        LD      hl,0C000H       ; System Dependent-First video
2998:			                                ; address
2999:	1EE9  3680    	        LD      (hl),80H        ; Start of blank border
3000:	1EEB  1101C0  	        LD      de,0C001H       ; Sys Dep- Next border square
3001:	1EEE  010F00  	        LD      bc,15           ; Number of bytes to be moved
3002:	1EF1  EDB0    	        LDIR                    ; Blank border bar
3003:	1EF3  36AA    	        LD      (hl),0AAH       ; First black border box
3004:	1EF5  2C      	        INC     l               ; Next block address
3005:	1EF6  0606    	        LD      b,6             ; Number to be moved
3006:	1EF8  3680    	DB04:   LD      (hl),80H        ; Create white block
3007:	1EFA  2C      	        INC     l               ; Next block address
3008:	1EFB  10FB    	        DJNZ    DB04            ; Done ? No - jump
3009:	1EFD  0606    	        LD      b,6             ; Number of repeats
3010:	1EFF  36BF    	DB08:   LD      (hl),0BFH       ; Create black box ???
3011:	1F01  2C      	        INC     l               ; Next block address
3012:	1F02  10FB    	        DJNZ    DB08            ; Done ? No - jump
3013:	1F04  EB      	        EX      de,hl           ; Get ready for block move
3014:	1F05  012400  	        LD      bc,36           ; Bytes to be moved
3015:	1F08  EDB0    	        LDIR                    ; Move - completes first bar
3016:	1F0A  2100C0  	        LD      hl,0C000H       ; S D - First addr to be copied
3017:	1F0D  01D000  	        LD      bc,0D0H         ; Number of blocks to move
3018:	1F10  EDB0    	        LDIR                    ; Completes first rank
3019:	1F12  2116C0  	        LD      hl,0C016H       ; S D - Start of copy area
3020:	1F15  010600  	        LD      bc,6            ; Number of blocks to move
3021:	1F18  EDB0    	        LDIR                    ; First black square done
3022:	1F1A  2110C0  	        LD      hl,0C010H       ; S D - Start copy area
3023:	1F1D  012A00  	        LD      bc,42           ; Bytes to be moved
3024:	1F20  EDB0    	        LDIR                    ; Rest of bar done
3025:	1F22  2100C1  	        LD      hl,0C100H       ; S D - Start of copy area
3026:	1F25  01C000  	        LD      bc,0C0H         ; Move three bars
3027:	1F28  EDB0    	        LDIR                    ; Next rank done
3028:	1F2A  2100C0  	        LD      hl,0C000H       ; S D - Copy rest of screen
3029:	1F2D  010006  	        LD      bc,600H         ; Number of blocks
3030:	1F30  EDB0    	        LDIR                    ; Board done
3031:	1F32  3E15    	BSETUP: LD      a,21            ; First board index
3032:	1F34  325919  	BSET04: LD      (BRDPOS),a      ; Ready parameter
3033:	1F37  CDE01F  	        CALL    CONVRT          ; Norm addr into HL register
3034:	1F3A  CD471F  	        CALL    INSPCE          ; Insert that piece onto board
3035:	1F3D  3C      	        INC     a               ; Next square
3036:	1F3E  FE63    	        CP      99              ; Done ?
3037:	1F40  38F2    	        JR      C,BSET04        ; No - jump
3038:	1F42  F1      	        POP     af              ; Restore registers
3039:	1F43  E1      	        POP     hl
3040:	1F44  D1      	        POP     de
3041:	1F45  C1      	        POP     bc
3042:	1F46  C9      	        RET
3043:			
3044:			;***********************************************************
3045:			; INSERT PIECE SUBROUTINE
3046:			;***********************************************************
3047:			; FUNCTION:   --  This subroutine places a piece onto a
3048:			;                 given square on the video board. The piece
3049:			;                 inserted is that stored in the board array
3050:			;                 for that square.
3051:			;
3052:			; CALLED BY:  --  DPSPRD
3053:			;                 MATED
3054:			;
3055:			; CALLS:      --  MLTPLY
3056:			;
3057:			; ARGUMENTS:  --  Norm address for the square in register
3058:			;                 pair HL.
3059:			;***********************************************************
3060:	1F47  E5      	INSPCE: PUSH    hl              ; Save registers
3061:	1F48  C5      	        PUSH    bc
3062:	1F49  D5      	        PUSH    de
3063:	1F4A  DDE5    	        PUSH    ix
3064:	1F4C  F5      	        PUSH    af
3065:	1F4D  3A5919  	        LD      a,(BRDPOS)      ; Get board index
3066:	1F50  320000  	        LD      (M1),a          ; Save
3067:	1F53  DD2A0000	        LD      ix,(M1)         ; Index into board array
3068:	1F57  DD7EB4  	        LD      a,(ix+BOARD)    ; Contents of board array
3069:	1F5A  A7      	        AND     a               ; Is square empty ?
3070:	1F5B  287C    	        JR      Z,IP2C          ; Yes - jump
3071:	1F5D  FEFF    	        CP      0FFH            ; Is it a border square ?
3072:	1F5F  2878    	        JR      Z,IP2C          ; Yes - jump
3073:	1F61  0E00    	        LD      c,0             ; Clear flag register
3074:	1F63  CB7F    	        BIT     7,a             ; Is piece white ?
3075:	1F65  2802    	        JR      Z,IP04          ; Yes - jump
3076:	1F67  0E02    	        LD      c,2             ; Set black piece flag
3077:	1F69  E607    	IP04:   AND     7               ; Delete flags, leave piece
3078:	1F6B  3D      	        DEC     a               ; Piece on a 0 - 5 basis
3079:	1F6C  5F      	        LD      e,a             ; Save
3080:	1F6D  1610    	        LD      d,16            ; Multiplier
3081:	1F6F  CD1620  	        CALL    MLTPLY          ; For loc of piece in table
3082:	1F72  7A      	        LD      a,d             ; Displacement into block table
3083:	1F73  325B19  	        LD      (INDXER),a      ; Low order index byte
3084:	1F76  DD2A5B19	        LD      ix,(INDXER)     ; Get entire index
3085:	1F7A  CB46    	        BIT     0,(hl)          ; Is square white ?
3086:	1F7C  2801    	        JR      Z,IP08          ; Yes - jump
3087:	1F7E  0C      	        INC     c               ; Set complement flag
3088:	1F7F  2C      	IP08:   INC     l               ; Address of first alter block
3089:	1F80  E5      	        PUSH    hl              ; Save
3090:	1F81  1600    	        LD      d,0             ; Bar counter
3091:	1F83  0604    	IP0C:   LD      b,4             ; Block counter
3092:	1F85  DD7E80  	IP10:   LD      a,(ix+BLOCK)    ; Bring in source block
3093:	1F88  CB41    	        BIT     0,c             ; Should it be complemented ?
3094:	1F8A  2802    	        JR      Z,IP14          ; No - jump
3095:	1F8C  EE3F    	        XOR     3FH             ; Graphics complement
3096:	1F8E  77      	IP14:   LD      (hl),a          ; Store block
3097:	1F8F  2C      	        INC     l               ; Next block
3098:	1F90  DD23    	        INC     ix              ; Next source block
3099:	1F92  10F1    	        DJNZ    IP10            ; Done ? No - jump
3100:	1F94  7D      	        LD      a,l             ; Bar increment
3101:	1F95  C63C    	        ADD     a,3CH
3102:	1F97  6F      	        LD      l,a
3103:	1F98  14      	        INC     d               ; Bar counter
3104:	1F99  CB52    	        BIT     2,d             ; Done ?
3105:	1F9B  28E6    	        JR      Z,IP0C          ; No - jump
3106:	1F9D  E1      	        POP     hl              ; Address of Norm + 1
3107:	1F9E  CB41    	        BIT     0,c             ; Is square white ?
3108:	1FA0  2006    	        JR      NZ,IP18         ; No - jump
3109:	1FA2  CB49    	        BIT     1,c             ; Is piece white ?
3110:	1FA4  2033    	        JR      NZ,IP2C         ; No - jump
3111:	1FA6  1804    	        JR      IP1C            ; Jump
3112:	1FA8  CB49    	IP18:   BIT     1,c             ; Is piece white ?
3113:	1FAA  282D    	        JR      Z,IP2C          ; Yes - jump
3114:	1FAC  1606    	IP1C:   LD      d,6             ; Multiplier
3115:	1FAE  CD1620  	        CALL    MLTPLY          ; Multiply for displacement
3116:	1FB1  7A      	        LD      a,d             ; Kernel table displacement
3117:	1FB2  325B19  	        LD      (INDXER),a      ; Save
3118:	1FB5  DD2A5B19	        LD      ix,(INDXER)     ; Get complete index
3119:	1FB9  7D      	        LD      a,l             ; Start of Kernel
3120:	1FBA  C640    	        ADD     a,40H
3121:	1FBC  6F      	        LD      l,a
3122:	1FBD  1600    	        LD      d,0             ; Bar counter
3123:	1FBF  0603    	IP20:   LD      b,3             ; Block counter
3124:	1FC1  DD7EF0  	IP24:   LD      a,(ix+KERNEL)   ; Kernel block
3125:	1FC4  CB49    	        BIT     1,c             ; Need to complement ?
3126:	1FC6  2002    	        JR      NZ,IP28         ; No - jump
3127:	1FC8  EE3F    	        XOR     3FH             ; Graphics complement
3128:	1FCA  77      	IP28:   LD      (hl),a          ; Store block
3129:	1FCB  2C      	        INC     l               ; Next target block
3130:	1FCC  DD23    	        INC     ix              ; Next source block
3131:	1FCE  10F1    	        DJNZ    IP24            ; Done ? No - jump
3132:	1FD0  7D      	        LD      a,l             ; Bar increment
3133:	1FD1  C63D    	        ADD     a,3DH
3134:	1FD3  6F      	        LD      l,a
3135:	1FD4  14      	        INC     d               ; Bar counter
3136:	1FD5  CB4A    	        BIT     1,d             ; Done ?
3137:	1FD7  28E6    	        JR      Z,IP20          ; Repeat bar move
3138:	1FD9  F1      	IP2C:   POP     af              ; Restore registers
3139:	1FDA  DDE1    	        POP     ix
3140:	1FDC  D1      	        POP     de
3141:	1FDD  C1      	        POP     bc
3142:	1FDE  E1      	        POP     hl
3143:	1FDF  C9      	        RET
3144:			
3145:			;***********************************************************
3146:			; BOARD INDEX TO NORM ADDRESS SUBR.
3147:			;***********************************************************
3148:			; FUNCTION:   --  Converts a hexadecimal board index into
3149:			;                 a Norm address for the square.
3150:			;
3151:			; CALLED BY:  --  DSPBRD
3152:			;                 INSPCE
3153:			;                 ANALYS
3154:			;                 MATED
3155:			;
3156:			; CALLS:      --  DIVIDE
3157:			;                 MLTPLY
3158:			;
3159:			; ARGUMENTS:   -- Returns the Norm address in register pair
3160:			;                 HL.
3161:			;***********************************************************
3162:	1FE0  C5      	CONVRT: PUSH    bc              ; Save registers
3163:	1FE1  D5      	        PUSH    de
3164:	1FE2  F5      	        PUSH    af
3165:	1FE3  3A5919  	        LD      a,(BRDPOS)      ; Get board index
3166:	1FE6  57      	        LD      d,a             ; Set up dividend
3167:	1FE7  97      	        SUB     a
3168:	1FE8  1E0A    	        LD      e,10            ; Divisor
3169:	1FEA  CD0420  	        CALL    DIVIDE          ; Index into rank and file
3170:			                                ; file (1-8) & rank (2-9)
3171:	1FED  15      	        DEC     d               ; For rank (1-8)
3172:	1FEE  3D      	        DEC     a               ; For file (0-7)
3173:	1FEF  4A      	        LD      c,d             ; Save
3174:	1FF0  1606    	        LD      d,6             ; Multiplier
3175:	1FF2  5F      	        LD      e,a             ; File number is multiplicand
3176:	1FF3  CD1620  	        CALL    MLTPLY          ; Giving file displacement
3177:	1FF6  7A      	        LD      a,d             ; Save
3178:	1FF7  C610    	        ADD     a,10H           ; File norm address
3179:	1FF9  6F      	        LD      l,a             ; Low order address byte
3180:	1FFA  3E08    	        LD      a,8             ; Rank adjust
3181:	1FFC  91      	        SUB     c               ; Rank displacement
3182:	1FFD  C6C0    	        ADD     a,0C0H          ; Rank Norm address
3183:	1FFF  67      	        LD      h,a             ; High order addres byte
3184:	2000  F1      	        POP     af              ; Restore registers
3185:	2001  D1      	        POP     de
3186:	2002  C1      	        POP     bc
3187:	2003  C9      	        RET                     ; Return
3188:			
3189:			;***********************************************************
3190:			; POSITIVE INTEGER DIVISION
3191:			;   inputs hi=A lo=D, divide by E
3192:			;   output D, remainder in A
3193:			;***********************************************************
3194:	2004  C5      	DIVIDE: PUSH    bc
3195:	2005  0608    	        LD      b,8
3196:	2007  CB22    	DD04:   SLA     d
3197:	2009  17      	        RLA
3198:	200A  93      	        SUB     e
3199:	200B  FA1120  	        JP      M,rel027
3200:	200E  14      	        INC     d
3201:	200F  1801    	        JR      rel024
3202:	2011  83      	rel027: ADD     a,e
3203:	2012  10F3    	rel024: DJNZ    DD04
3204:	2014  C1      	        POP     bc
3205:	2015  C9      	        RET
3206:			
3207:			;***********************************************************
3208:			; POSITIVE INTEGER MULTIPLICATION
3209:			;   inputs D, E
3210:			;   output hi=A lo=D
3211:			;***********************************************************
3212:	2016  C5      	MLTPLY: PUSH    bc
3213:	2017  97      	        SUB     a
3214:	2018  0608    	        LD      b,8
3215:	201A  CB42    	ML04:   BIT     0,d
3216:	201C  2801    	        JR      Z,rel025
3217:	201E  83      	        ADD     a,e
3218:	201F  CB2F    	rel025: SRA     a
3219:	2021  CB1A    	        RR      d
3220:	2023  10F5    	        DJNZ    ML04
3221:	2025  C1      	        POP     bc
3222:	2026  C9      	        RET
3223:			
3224:			;***********************************************************
3225:			; SQUARE BLINKER
3226:			;***********************************************************
3227:			;
3228:			; FUNCTION:   --  To blink the graphics board square to signal
3229:			;                 a piece's intention to move, or to high-
3230:			;                 light the square as being alterable
3231:			;                 in ANALYS.
3232:			;
3233:			; CALLED BY:  --  MAKEMV
3234:			;                 ANALYS
3235:			;                 MATED
3236:			;
3237:			; CALLS:      --  None
3238:			;
3239:			; ARGUMENTS:  --  Norm address of desired square passed in register
3240:			;                 pair HL. Number of times to blink passed in
3241:			;                 register B.
3242:			;***********************************************************
3243:	2027  F5      	BLNKER: PUSH    af              ; Save registers
3244:	2028  C5      	        PUSH    bc
3245:	2029  D5      	        PUSH    de
3246:	202A  E5      	        PUSH    hl
3247:	202B  DDE5    	        PUSH    ix
3248:	202D  225D19  	        LD      (NORMAD),hl     ; Save Norm address
3249:	2030  1600    	BL04:   LD      d,0             ; Bar counter
3250:	2032  0E00    	BL08:   LD      c,0             ; Block counter
3251:	2034  7E      	BL0C:   LD      a,(hl)          ; Fetch block
3252:	2035  EE3F    	        XOR     3FH             ; Graphics complement
3253:	2037  77      	        LD      (hl),a          ; Replace block
3254:	2038  2C      	        INC     l               ; Next block address
3255:	2039  0C      	        INC     c               ; Increment block counter
3256:	203A  79      	        LD      a,c
3257:	203B  FE06    	        CP      6               ; Done ?
3258:	203D  20F5    	        JR      NZ,BL0C         ; No - jump
3259:	203F  7D      	        LD      a,l             ; Address
3260:	2040  C63A    	        ADD     a,3AH           ; Adjust square position
3261:	2042  6F      	        LD      l,a             ; Replace address
3262:	2043  14      	        INC     d               ; Increment bar counter
3263:	2044  CB52    	        BIT     2,d             ; Done ?
3264:	2046  28EA    	        JR      Z,BL08          ; No - jump
3265:	2048  2A5D19  	        LD      hl,(NORMAD)     ; Get Norm address
3266:	204B  C5      	        PUSH    bc              ; Save register
3267:	204C  013030  	        LD      bc,3030H        ; Delay loop, for visibility
3268:	204F  10FE    	BL10:   DJNZ    BL10
3269:	2051  0D      	        DEC     c
3270:	2052  20FB    	        JR      NZ,BL10
3271:	2054  C1      	        POP     bc              ; Restore register
3272:	2055  10D9    	        DJNZ    BL04            ; Done ? No - jump
3273:	2057  DDE1    	        POP     ix              ; Restore registers
3274:	2059  E1      	        POP     hl
3275:	205A  D1      	        POP     de
3276:	205B  C1      	        POP     bc
3277:	205C  F1      	        POP     af
3278:	205D  C9      	        RET                     ; Return
3279:			
3280:			;***********************************************************
3281:			; EXECUTE MOVE SUBROUTINE
3282:			;***********************************************************
3283:			; FUNCTION:   --  This routine is the control routine for
3284:			;                 MAKEMV. It checks for double moves and
3285:			;                 sees that they are properly handled. It
3286:			;                 sets flags in the B register for double
3287:			;                 moves:
3288:			;                       En Passant -- Bit 0
3289:			;                       O-O        -- Bit 1
3290:			;                       O-O-O      -- Bit 2
3291:			;
3292:			; CALLED BY:   -- PLYRMV
3293:			;                 CPTRMV
3294:			;
3295:			; CALLS:       -- MAKEMV
3296:			;
3297:			; ARGUMENTS:   -- Flags set in the B register as described
3298:			;                 above.
3299:			;***********************************************************
3300:	205E  DDE5    	EXECMV: PUSH    ix              ; Save registers
3301:	2060  F5      	        PUSH    af
3302:	2061  DD2A1600	        LD      ix,(MLPTRJ)     ; Index into move list
3303:	2065  DD4E02  	        LD      c,(ix+MLFRP)    ; Move list "from" position
3304:	2068  DD5E03  	        LD      e,(ix+MLTOP)    ; Move list "to" position
3305:	206B  CDA220  	        CALL    MAKEMV          ; Produce move
3306:	206E  DD5604  	        LD      d,(ix+MLFLG)    ; Move list flags
3307:	2071  0600    	        LD      b,0
3308:	2073  CB72    	        BIT     6,d             ; Double move ?
3309:	2075  2827    	        JR      Z,EX14          ; No - jump
3310:	2077  110600  	        LD      de,6            ; Move list entry width
3311:	207A  DD19    	        ADD     ix,de           ; Increment MLPTRJ
3312:	207C  DD4E02  	        LD      c,(ix+MLFRP)    ; Second "from" position
3313:	207F  DD5E03  	        LD      e,(ix+MLTOP)    ; Second "to" position
3314:	2082  7B      	        LD      a,e             ; Get "to" position
3315:	2083  B9      	        CP      c               ; Same as "from" position ?
3316:	2084  2003    	        JR      NZ,EX04         ; No - jump
3317:	2086  04      	        INC     b               ; Set en passant flag
3318:	2087  1812    	        JR      EX10            ; Jump
3319:	2089  FE1A    	EX04:   CP      1AH             ; White O-O ?
3320:	208B  2004    	        JR      NZ,EX08         ; No - jump
3321:	208D  CBC8    	        SET     1,b             ; Set O-O flag
3322:	208F  180A    	        JR      EX10            ; Jump
3323:	2091  FE60    	EX08:   CP      60H             ; Black 0-0 ?
3324:	2093  2004    	        JR      NZ,EX0C         ; No - jump
3325:	2095  CBC8    	        SET     1,b             ; Set 0-0 flag
3326:	2097  1802    	        JR      EX10            ; Jump
3327:	2099  CBD0    	EX0C:   SET     2,b             ; Set 0-0-0 flag
3328:	209B  CDA220  	EX10:   CALL    MAKEMV          ; Make 2nd move on board
3329:	209E  F1      	EX14:   POP     af              ; Restore registers
3330:	209F  DDE1    	        POP     ix
3331:	20A1  C9      	        RET                     ; Return
3332:			
3333:			;***********************************************************
3334:			; MAKE MOVE SUBROUTINE
3335:			;***********************************************************
3336:			; FUNCTION:   --  Moves the piece on the board when a move
3337:			;                 is made. It blinks both the "from" and
3338:			;                 "to" positions to give notice of the move.
3339:			;
3340:			; CALLED BY:  --  EXECMV
3341:			;
3342:			; CALLS:      --  CONVRT
3343:			;                 BLNKER
3344:			;                 INSPCE
3345:			;
3346:			; ARGUMENTS:  --  The "from" position is passed in register
3347:			;                 C, and the "to" position in register E.
3348:			;***********************************************************
3349:	20A2  F5      	MAKEMV: PUSH    af              ; Save register
3350:	20A3  C5      	        PUSH    bc
3351:	20A4  D5      	        PUSH    de
3352:	20A5  E5      	        PUSH    hl
3353:	20A6  79      	        LD      a,c             ; "From" position
3354:	20A7  325919  	        LD      (BRDPOS),a      ; Set up parameter
3355:	20AA  CDE01F  	        CALL    CONVRT          ; Getting Norm address in HL
3356:	20AD  060A    	        LD      b,10            ; Blink parameter
3357:	20AF  CD2720  	        CALL    BLNKER          ; Blink "from" square
3358:	20B2  7E      	        LD      a,(hl)          ; Bring in Norm 1plock
3359:	20B3  2C      	        INC     l               ; First change block
3360:	20B4  1600    	        LD      d,0             ; Bar counter
3361:	20B6  0604    	MM04:   LD      b,4             ; Block counter
3362:	20B8  77      	MM08:   LD      (hl),a          ; Insert blank block
3363:	20B9  2C      	        INC     l               ; Next change block
3364:	20BA  10FC    	        DJNZ    MM08            ; Done ? No - jump
3365:	20BC  4F      	        LD      c,a             ; Saving norm block
3366:	20BD  7D      	        LD      a,l             ; Bar increment
3367:	20BE  C63C    	        ADD     a,3CH
3368:	20C0  6F      	        LD      l,a
3369:	20C1  79      	        LD      a,c             ; Restore Norm block
3370:	20C2  14      	        INC     d
3371:	20C3  CB52    	        BIT     2,d             ; Done ?
3372:	20C5  28EF    	        JR      Z,MM04          ; No - jump
3373:	20C7  7B      	        LD      a,e             ; Get "to" position
3374:	20C8  325919  	        LD      (BRDPOS),a      ; Set up parameter
3375:	20CB  CDE01F  	        CALL    CONVRT          ; Getting Norm address in HL
3376:	20CE  060A    	        LD      b,10            ; Blink parameter
3377:	20D0  CD471F  	        CALL    INSPCE          ; Inserts the piece
3378:	20D3  CD2720  	        CALL    BLNKER          ; Blinks "to" square
3379:	20D6  E1      	        POP     hl              ; Restore registers
3380:	20D7  D1      	        POP     de
3381:	20D8  C1      	        POP     bc
3382:	20D9  F1      	        POP     af
3383:	20DA  C9      	        RET                     ; Return
3384:			
3385:			



Statistics:

     4	passes
     0	jr promotions
   365	symbols
  4893	bytes

    55	macro calls
   377	macro bytes
     0	invented symbols



Symbol Table:

adjptr           c82     
admove           d10     
again           18e0     
am10             d4f     
an04            1dcd     
an08            1dd2     
an0b            1e3b     
an18            1e1f     
an19            1e25     
an1a            1e2f     
an1b            1e3e     
an1c            1e5a     
an20            1e99     
analys          1db8     
anamsg          1822     
anbdps          195a     
as19             ea6     
as20             eaf     
as25             eb4     
ascend          140a     
asntbi          1cc7     
at04            1cea     
at10             dcf     
at12             de3     
at13             de8     
at14             df9     
at14a            dea     
at14b            df3     
at15             e0b     
at16             e17     
at20             e39     
at21             e40     
at25             e47     
at30             e4c     
at31             e5c     
at32             e5f     
at5              dc4     
atklst           12c     
atksav           e6f     
attack           db9     
back01           b05     
back02           f6d     
back03          1007     
back04          1086     
back05          12e9     
back06          1ea9     
bact           = 133     
bc0               31     
bestm             1a     
bishop         =   3     
bitasn          1c62     
bl04            2030     
bl08            2032     
bl0c            2034     
bl10            204f     
black          =  80     
blankr          193c     
blbase         = 200     
blnker          2027     
block          =ffffff80 
bm5             145c     
bm9             1479     
bmoves            34     
board          =ffffffb4 
boarda            b4     
book            143e     
bpawn          =  81     
brdc              2c     
brdpos          1959     
bset04          1f34     
bsetup          1f32     
ca10             cb8     
ca15             cd6     
ca20             d06     
ca5              ca0     
castle           c92     
chartr          1d43     
ckflg             29     
ckmsg           18c0     
clrmsg          1847     
color             21     
convrt          1fe0     
cp0c            1b36     
cp10            1b57     
cp1c            1b78     
cp24            1ba3     
cptrmv          1b21     
crtnes          18f6     
db04            1ef8     
db08            1eff     
dcount         =ffffff9f 
dd04            2007     
direct         =ffffff80 
divide          2004     
dpoint         =ffffff98 
dr08            1a75     
dr0c            1a8f     
dr10            1a9f     
dr14            1ab2     
driv01          1a11     
driv04          1a4c     
driver          1a00     
dspbrd          1edb     
enpsnt           c1d     
ev10            12b4     
ev5             12ae     
eval            129e     
ex04            2089     
ex08            2091     
ex0c            2099     
ex10            209b     
ex14            209e     
execmv          205e     
fcdmat          1baf     
fm04            1bd6     
fm08            1be4     
fm09            1be9     
fm0c            1bfa     
fm15            1320     
fm18            1363     
fm19            1370     
fm25            138d     
fm30            13a6     
fm35            13ba     
fm36            13c6     
fm37            13ce     
fm40            1404     
fm5             1305     
fndmov          12b8     
genmov           d56     
gm10             d8e     
gm5              d71     
grttng          1800     
ib2              b10     
in04            1ae8     
in08            1b03     
inchk            d98     
inchk1           d9b     
indx1              e     
indx2             10     
indxer          195b     
initbd           b00     
inspce          1f47     
interr          1ab9     
inval1          1944     
inval2          1950     
ip04            1f69     
ip08            1f7f     
ip0c            1f83     
ip10            1f85     
ip14            1f8e     
ip18            1fa8     
ip1c            1fac     
ip20            1fbf     
ip24            1fc1     
ip28            1fca     
ip2c            1fd9     
iwin            18db     
kernel         =fffffff0 
king           =   6     
knight         =   2     
kolor             20     
lim10           116f     
limit           1164     
linect          195f     
m1                 0     
m2                 2     
m3                 4     
m4                 6     
ma08            1d8d     
ma0c            1dac     
makemv          20a2     
mated           1d7c     
matef             2a     
ml04            201a     
mlend          = af8     
mlflg          =   4     
mlfrp          =   2     
mlist            300     
mllst             1c     
mlnxt             1e     
mlptr          =   0     
mlptri            14     
mlptrj            16     
mltop          =   3     
mltply          2016     
mlval          =   5     
mm04            20b6     
mm08            20b8     
move            1173     
moveno            26     
mp10             ba1     
mp15             bc2     
mp20             bcf     
mp25             be4     
mp26             be9     
mp30             bf9     
mp31             bfc     
mp35             c02     
mp36             c17     
mp37             c10     
mp5              b98     
mpiece           b7a     
mtmsg           18c5     
mtpl            18cd     
mtrl              30     
mv0               32     
mv1             1178     
mv10            11b8     
mv15            11bb     
mv20            11c0     
mv21            11c3     
mv22            11c8     
mv30            11cf     
mv40            11db     
mv5             1199     
mvemsg          18b1     
mvenum          1886     
nextad           ffc     
normad          195d     
npins             12     
nply              28     
nx6             100f     
o_o             18b6     
o_o_o           18bb     
p1                22     
p2                23     
p3                24     
p_pep           193f     
pa1              b74     
pa2              b77     
path             b4c     
pawn           =   1     
pc1              ec3     
pc3              edb     
pc5              ee0     
pcs             18ce     
pf1              eeb     
pf10             f44     
pf15             f4d     
pf19             f5a     
pf2              f0a     
pf20             f92     
pf25             fa3     
pf26             fa7     
pf27             fab     
pf5              f17     
pgifnd          1d5d     
pieces         =ffffffac 
pinfnd           ee4     
pl08            1ca6     
plist          =  39     
plista           13a     
plistd         =  43     
plydep          1904     
plyix            15f     
plymax            27     
plyrmv          1c71     
pmate             25     
pnck             eb7     
points          1011     
posk             14e     
posq             150     
pt20            10cd     
pt23            10dc     
pt25            10eb     
pt25a           1104     
pt5             102b     
pt6a            1068     
pt6aa           1059     
pt6b            106f     
pt6c            1073     
pt6d            107b     
pt6x            1080     
ptsck             33     
ptsl              2d     
ptsw1             2e     
ptsw2             2f     
pvalue         =ffffffa5 
queen          =   5     
rel001           b82     
rel002           c29     
rel003           c59     
rel004           d32     
rel005           da2     
rel006           e8b     
rel007           e94     
rel008           f87     
rel009           fbd     
rel010           ff4     
rel011          10d5     
rel012          10e6     
rel013          110b     
rel014          111b     
rel015          1125     
rel016          1157     
rel017          134c     
rel018          137f     
rel019          1419     
rel020          1b64     
rel021          1b71     
rel022          1e13     
rel023          1ec2     
rel024          2012     
rel025          201f     
rel026          1144     
rel027          2011     
rel23           1d89     
rook           =   4     
royalt          1ea4     
ry04            1eb0     
ry08            1ece     
ry0c            1ed2     
score            153     
scrix             18     
sortm           1262     
space           187c     
sr10            1274     
sr15            1282     
sr25            1294     
sr30            129a     
sr5             1269     
stack            2ff     
start              0     
t1                 8     
t2                 a     
t3                 c     
tbase          = 100     
tbcpcl          1c26     
tbcpmv          1c4e     
tbplcl          1c12     
tbplmv          1c3a     
title1          1870     
title2          1876     
title3          1889     
title4          191b     
um1             11ea     
um10            122e     
um15            1233     
um16            1238     
um20            123d     
um21            1240     
um22            1245     
um30            124c     
um40            1258     
um5             120b     
um6             120f     
unmove          11e5     
uwin            18d4     
va10            1d3c     
va5             1d0b     
va6             1d1b     
va7             1d2a     
va8             1d37     
va9             1d39     
valm              2b     
valmov          1cec     
wact           = 12c     
white          =   0     
wsmove          192b     
xc10             fd4     
xc15             fe0     
xc18             fec     
xc19             fee     
xchng            fae     
